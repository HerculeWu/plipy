
# cuppa3parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftEQLEleftPLUSMINUSleftTIMESDIVIDErightUMINUSNOTPLUS MINUS TIMES DIVIDE EQ LE INTEGER ID GET PUT IF ELSE WHILE NOT DECLARE RETURN\n    program : stmt_list\n    \n    stmt_list : stmt stmt_list\n              | empty\n    \n    stmt : DECLARE ID '(' opt_formal_args ')' stmt\n         | DECLARE ID opt_init opt_semi\n         | ID '=' exp opt_semi\n         | GET ID opt_semi\n         | PUT exp opt_semi\n         | ID '(' opt_actual_args ')' opt_semi\n         | RETURN opt_exp opt_semi\n         | WHILE '(' exp ')' stmt\n         | IF '(' exp ')' stmt opt_else\n         | '{' stmt_list '}'\n    \n    opt_formal_args : formal_args\n                    | empty\n    \n    formal_args : ID ',' formal_args\n                | ID\n    \n    opt_init : '=' exp\n             | empty\n    \n    opt_actual_args : actual_args\n                    | empty\n    \n    actual_args : exp ',' actual_args\n                | exp\n    \n    opt_exp : exp\n            | empty\n    \n    opt_else : ELSE stmt\n             | empty\n    \n    exp : exp PLUS exp\n        | exp MINUS exp\n        | exp TIMES exp\n        | exp DIVIDE exp\n        | exp EQ exp\n        | exp LE exp\n    \n    exp : INTEGER\n    \n    exp : ID\n    \n    exp : ID '(' opt_actual_args ')'\n    \n    exp : '(' exp ')'\n    \n    exp : MINUS exp %prec UMINUS\n    \n    exp : NOT exp\n    \n    opt_semi : ';'\n             | empty\n    \n    empty :\n    "
    
_lr_action_items = {'DECLARE':([0,3,9,12,14,17,18,20,21,24,25,26,31,33,34,39,40,41,42,49,52,53,56,61,62,63,64,66,67,68,69,70,71,73,74,75,77,78,80,81,82,84,85,86,87,88,],[5,5,-42,5,-42,-42,-42,-34,-35,-42,-24,-25,-42,-19,-42,-7,-40,-41,-8,-38,-39,-10,-13,-5,-18,-6,-42,-28,-29,-30,-31,-32,-33,-37,5,5,5,-9,-36,-11,-42,-4,-12,5,-27,-26,]),'ID':([0,3,5,7,8,9,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,34,39,40,41,42,43,44,45,46,47,48,49,50,52,53,56,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,77,78,80,81,82,84,85,86,87,88,],[6,6,14,17,21,21,6,-42,21,21,-42,-42,21,-34,-35,21,21,-42,-24,-25,21,21,57,-42,21,-19,-42,-7,-40,-41,-8,21,21,21,21,21,21,-38,21,-39,-10,-13,-5,-18,-6,-42,21,-28,-29,-30,-31,-32,-33,-37,6,6,57,6,-9,-36,-11,-42,-4,-12,6,-27,-26,]),'GET':([0,3,9,12,14,17,18,20,21,24,25,26,31,33,34,39,40,41,42,49,52,53,56,61,62,63,64,66,67,68,69,70,71,73,74,75,77,78,80,81,82,84,85,86,87,88,],[7,7,-42,7,-42,-42,-42,-34,-35,-42,-24,-25,-42,-19,-42,-7,-40,-41,-8,-38,-39,-10,-13,-5,-18,-6,-42,-28,-29,-30,-31,-32,-33,-37,7,7,7,-9,-36,-11,-42,-4,-12,7,-27,-26,]),'PUT':([0,3,9,12,14,17,18,20,21,24,25,26,31,33,34,39,40,41,42,49,52,53,56,61,62,63,64,66,67,68,69,70,71,73,74,75,77,78,80,81,82,84,85,86,87,88,],[8,8,-42,8,-42,-42,-42,-34,-35,-42,-24,-25,-42,-19,-42,-7,-40,-41,-8,-38,-39,-10,-13,-5,-18,-6,-42,-28,-29,-30,-31,-32,-33,-37,8,8,8,-9,-36,-11,-42,-4,-12,8,-27,-26,]),'RETURN':([0,3,9,12,14,17,18,20,21,24,25,26,31,33,34,39,40,41,42,49,52,53,56,61,62,63,64,66,67,68,69,70,71,73,74,75,77,78,80,81,82,84,85,86,87,88,],[9,9,-42,9,-42,-42,-42,-34,-35,-42,-24,-25,-42,-19,-42,-7,-40,-41,-8,-38,-39,-10,-13,-5,-18,-6,-42,-28,-29,-30,-31,-32,-33,-37,9,9,9,-9,-36,-11,-42,-4,-12,9,-27,-26,]),'WHILE':([0,3,9,12,14,17,18,20,21,24,25,26,31,33,34,39,40,41,42,49,52,53,56,61,62,63,64,66,67,68,69,70,71,73,74,75,77,78,80,81,82,84,85,86,87,88,],[10,10,-42,10,-42,-42,-42,-34,-35,-42,-24,-25,-42,-19,-42,-7,-40,-41,-8,-38,-39,-10,-13,-5,-18,-6,-42,-28,-29,-30,-31,-32,-33,-37,10,10,10,-9,-36,-11,-42,-4,-12,10,-27,-26,]),'IF':([0,3,9,12,14,17,18,20,21,24,25,26,31,33,34,39,40,41,42,49,52,53,56,61,62,63,64,66,67,68,69,70,71,73,74,75,77,78,80,81,82,84,85,86,87,88,],[11,11,-42,11,-42,-42,-42,-34,-35,-42,-24,-25,-42,-19,-42,-7,-40,-41,-8,-38,-39,-10,-13,-5,-18,-6,-42,-28,-29,-30,-31,-32,-33,-37,11,11,11,-9,-36,-11,-42,-4,-12,11,-27,-26,]),'{':([0,3,9,12,14,17,18,20,21,24,25,26,31,33,34,39,40,41,42,49,52,53,56,61,62,63,64,66,67,68,69,70,71,73,74,75,77,78,80,81,82,84,85,86,87,88,],[12,12,-42,12,-42,-42,-42,-34,-35,-42,-24,-25,-42,-19,-42,-7,-40,-41,-8,-38,-39,-10,-13,-5,-18,-6,-42,-28,-29,-30,-31,-32,-33,-37,12,12,12,-9,-36,-11,-42,-4,-12,12,-27,-26,]),'$end':([0,1,2,3,4,9,13,14,17,18,20,21,24,25,26,31,33,34,39,40,41,42,49,52,53,56,61,62,63,64,66,67,68,69,70,71,73,78,80,81,82,84,85,87,88,],[-42,0,-1,-42,-3,-42,-2,-42,-42,-42,-34,-35,-42,-24,-25,-42,-19,-42,-7,-40,-41,-8,-38,-39,-10,-13,-5,-18,-6,-42,-28,-29,-30,-31,-32,-33,-37,-9,-36,-11,-42,-4,-12,-27,-26,]),'}':([3,4,9,12,13,14,17,18,20,21,24,25,26,29,31,33,34,39,40,41,42,49,52,53,56,61,62,63,64,66,67,68,69,70,71,73,78,80,81,82,84,85,87,88,],[-42,-3,-42,-42,-2,-42,-42,-42,-34,-35,-42,-24,-25,56,-42,-19,-42,-7,-40,-41,-8,-38,-39,-10,-13,-5,-18,-6,-42,-28,-29,-30,-31,-32,-33,-37,-9,-36,-11,-42,-4,-12,-27,-26,]),'=':([6,14,],[15,32,]),'(':([6,8,9,10,11,14,15,16,19,21,22,23,27,28,32,43,44,45,46,47,48,50,65,],[16,22,22,27,28,30,22,22,22,50,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'INTEGER':([8,9,15,16,19,22,23,27,28,32,43,44,45,46,47,48,50,65,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'MINUS':([8,9,15,16,18,19,20,21,22,23,25,27,28,32,34,38,43,44,45,46,47,48,49,50,51,52,54,55,62,65,66,67,68,69,70,71,73,80,],[19,19,19,19,44,19,-34,-35,19,19,44,19,19,19,44,44,19,19,19,19,19,19,-38,19,44,-39,44,44,44,19,-28,-29,-30,-31,44,44,-37,-36,]),'NOT':([8,9,15,16,19,22,23,27,28,32,43,44,45,46,47,48,50,65,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),';':([9,14,17,18,20,21,24,25,26,31,33,34,49,52,62,64,66,67,68,69,70,71,73,80,],[-42,-42,40,40,-34,-35,40,-24,-25,40,-19,40,-38,-39,-18,40,-28,-29,-30,-31,-32,-33,-37,-36,]),'ELSE':([9,14,17,18,20,21,24,25,26,31,33,34,39,40,41,42,49,52,53,56,61,62,63,64,66,67,68,69,70,71,73,78,80,81,82,84,85,87,88,],[-42,-42,-42,-42,-34,-35,-42,-24,-25,-42,-19,-42,-7,-40,-41,-8,-38,-39,-10,-13,-5,-18,-6,-42,-28,-29,-30,-31,-32,-33,-37,-9,-36,-11,86,-4,-12,-27,-26,]),')':([16,20,21,30,35,36,37,38,49,50,51,52,54,55,57,58,59,60,66,67,68,69,70,71,72,73,79,80,83,],[-42,-34,-35,-42,64,-20,-21,-23,-38,-42,73,-39,74,75,-17,77,-14,-15,-28,-29,-30,-31,-32,-33,80,-37,-22,-36,-16,]),'PLUS':([18,20,21,25,34,38,49,51,52,54,55,62,66,67,68,69,70,71,73,80,],[43,-34,-35,43,43,43,-38,43,-39,43,43,43,-28,-29,-30,-31,43,43,-37,-36,]),'TIMES':([18,20,21,25,34,38,49,51,52,54,55,62,66,67,68,69,70,71,73,80,],[45,-34,-35,45,45,45,-38,45,-39,45,45,45,45,45,-30,-31,45,45,-37,-36,]),'DIVIDE':([18,20,21,25,34,38,49,51,52,54,55,62,66,67,68,69,70,71,73,80,],[46,-34,-35,46,46,46,-38,46,-39,46,46,46,46,46,-30,-31,46,46,-37,-36,]),'EQ':([18,20,21,25,34,38,49,51,52,54,55,62,66,67,68,69,70,71,73,80,],[47,-34,-35,47,47,47,-38,47,-39,47,47,47,-28,-29,-30,-31,-32,-33,-37,-36,]),'LE':([18,20,21,25,34,38,49,51,52,54,55,62,66,67,68,69,70,71,73,80,],[48,-34,-35,48,48,48,-38,48,-39,48,48,48,-28,-29,-30,-31,-32,-33,-37,-36,]),',':([20,21,38,49,52,57,66,67,68,69,70,71,73,80,],[-34,-35,65,-38,-39,76,-28,-29,-30,-31,-32,-33,-37,-36,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmt_list':([0,3,12,],[2,13,29,]),'stmt':([0,3,12,74,75,77,86,],[3,3,3,81,82,84,88,]),'empty':([0,3,9,12,14,16,17,18,24,30,31,34,50,64,82,],[4,4,26,4,33,37,41,41,41,60,41,41,37,41,87,]),'exp':([8,9,15,16,19,22,23,27,28,32,43,44,45,46,47,48,50,65,],[18,25,34,38,49,51,52,54,55,62,66,67,68,69,70,71,38,38,]),'opt_exp':([9,],[24,]),'opt_init':([14,],[31,]),'opt_actual_args':([16,50,],[35,72,]),'actual_args':([16,50,65,],[36,36,79,]),'opt_semi':([17,18,24,31,34,64,],[39,42,53,61,63,78,]),'opt_formal_args':([30,],[58,]),'formal_args':([30,76,],[59,83,]),'opt_else':([82,],[85,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt_list','program',1,'p_prog','cuppa3_frontend_gram.py',23),
  ('stmt_list -> stmt stmt_list','stmt_list',2,'p_stmt_list','cuppa3_frontend_gram.py',30),
  ('stmt_list -> empty','stmt_list',1,'p_stmt_list','cuppa3_frontend_gram.py',31),
  ('stmt -> DECLARE ID ( opt_formal_args ) stmt','stmt',6,'p_stmt','cuppa3_frontend_gram.py',41),
  ('stmt -> DECLARE ID opt_init opt_semi','stmt',4,'p_stmt','cuppa3_frontend_gram.py',42),
  ('stmt -> ID = exp opt_semi','stmt',4,'p_stmt','cuppa3_frontend_gram.py',43),
  ('stmt -> GET ID opt_semi','stmt',3,'p_stmt','cuppa3_frontend_gram.py',44),
  ('stmt -> PUT exp opt_semi','stmt',3,'p_stmt','cuppa3_frontend_gram.py',45),
  ('stmt -> ID ( opt_actual_args ) opt_semi','stmt',5,'p_stmt','cuppa3_frontend_gram.py',46),
  ('stmt -> RETURN opt_exp opt_semi','stmt',3,'p_stmt','cuppa3_frontend_gram.py',47),
  ('stmt -> WHILE ( exp ) stmt','stmt',5,'p_stmt','cuppa3_frontend_gram.py',48),
  ('stmt -> IF ( exp ) stmt opt_else','stmt',6,'p_stmt','cuppa3_frontend_gram.py',49),
  ('stmt -> { stmt_list }','stmt',3,'p_stmt','cuppa3_frontend_gram.py',50),
  ('opt_formal_args -> formal_args','opt_formal_args',1,'p_opt_formal_args','cuppa3_frontend_gram.py',78),
  ('opt_formal_args -> empty','opt_formal_args',1,'p_opt_formal_args','cuppa3_frontend_gram.py',79),
  ('formal_args -> ID , formal_args','formal_args',3,'p_formal_args','cuppa3_frontend_gram.py',86),
  ('formal_args -> ID','formal_args',1,'p_formal_args','cuppa3_frontend_gram.py',87),
  ('opt_init -> = exp','opt_init',2,'p_opt_init','cuppa3_frontend_gram.py',97),
  ('opt_init -> empty','opt_init',1,'p_opt_init','cuppa3_frontend_gram.py',98),
  ('opt_actual_args -> actual_args','opt_actual_args',1,'p_opt_actual_args','cuppa3_frontend_gram.py',108),
  ('opt_actual_args -> empty','opt_actual_args',1,'p_opt_actual_args','cuppa3_frontend_gram.py',109),
  ('actual_args -> exp , actual_args','actual_args',3,'p_actual_args','cuppa3_frontend_gram.py',116),
  ('actual_args -> exp','actual_args',1,'p_actual_args','cuppa3_frontend_gram.py',117),
  ('opt_exp -> exp','opt_exp',1,'p_opt_exp','cuppa3_frontend_gram.py',127),
  ('opt_exp -> empty','opt_exp',1,'p_opt_exp','cuppa3_frontend_gram.py',128),
  ('opt_else -> ELSE stmt','opt_else',2,'p_opt_else','cuppa3_frontend_gram.py',135),
  ('opt_else -> empty','opt_else',1,'p_opt_else','cuppa3_frontend_gram.py',136),
  ('exp -> exp PLUS exp','exp',3,'p_binop_exp','cuppa3_frontend_gram.py',146),
  ('exp -> exp MINUS exp','exp',3,'p_binop_exp','cuppa3_frontend_gram.py',147),
  ('exp -> exp TIMES exp','exp',3,'p_binop_exp','cuppa3_frontend_gram.py',148),
  ('exp -> exp DIVIDE exp','exp',3,'p_binop_exp','cuppa3_frontend_gram.py',149),
  ('exp -> exp EQ exp','exp',3,'p_binop_exp','cuppa3_frontend_gram.py',150),
  ('exp -> exp LE exp','exp',3,'p_binop_exp','cuppa3_frontend_gram.py',151),
  ('exp -> INTEGER','exp',1,'p_integer_exp','cuppa3_frontend_gram.py',158),
  ('exp -> ID','exp',1,'p_id_exp','cuppa3_frontend_gram.py',165),
  ('exp -> ID ( opt_actual_args )','exp',4,'p_call_exp','cuppa3_frontend_gram.py',172),
  ('exp -> ( exp )','exp',3,'p_paren_exp','cuppa3_frontend_gram.py',179),
  ('exp -> MINUS exp','exp',2,'p_uminus_exp','cuppa3_frontend_gram.py',186),
  ('exp -> NOT exp','exp',2,'p_not_exp','cuppa3_frontend_gram.py',193),
  ('opt_semi -> ;','opt_semi',1,'p_opt_semi','cuppa3_frontend_gram.py',200),
  ('opt_semi -> empty','opt_semi',1,'p_opt_semi','cuppa3_frontend_gram.py',201),
  ('empty -> <empty>','empty',0,'p_empty','cuppa3_frontend_gram.py',208),
]
