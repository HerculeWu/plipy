
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftEQLEleftPLUSMINUSleftTIMESDIVIDErightUMINUSNOTPLUS MINUS TIMES DIVIDE EQ LE INTEGER FLOAT STRING ID GET PUT IF ELSE WHILE NOT DECLARE RETURN\n    program : stmt_list\n\n    stmt_list : stmt stmt_list\n              | empty\n\n    stmt : DECLARE ID '(' opt_formal_args ')' stmt\n         | DECLARE ID opt_init opt_semi\n         | ID '=' exp opt_semi\n         | GET ID opt_semi\n         | PUT exp opt_semi\n         | ID '(' opt_actual_args ')' opt_semi\n         | RETURN opt_exp opt_semi\n         | WHILE '(' exp ')' stmt\n         | IF '(' exp ')' stmt opt_else\n         | '{' stmt_list '}'\n\n    opt_formal_args : formal_args\n                    | empty\n\n    formal_args : ID ',' formal_args\n                | ID\n\n    opt_init : '=' exp\n             | empty\n             \n    opt_actual_args : actual_args\n                    | empty\n    \n    actual_args : exp ',' actual_args\n                | exp\n                \n    opt_exp : exp\n            | empty\n\n    opt_else : ELSE stmt\n             | empty\n             \n    opt_semi : ';'\n             | empty\n\n    exp : exp PLUS exp\n        | exp MINUS exp\n        | exp TIMES exp\n        | exp DIVIDE exp\n        | exp EQ exp\n        | exp LE exp\n        | INTEGER\n        | FLOAT\n        | STRING\n        | ID\n        | ID '(' opt_actual_args ')'\n        | '(' exp ')'\n        | MINUS exp %prec UMINUS\n        | NOT exp\n    empty :"
    
_lr_action_items = {'DECLARE':([0,3,9,12,14,17,18,20,21,22,23,26,27,28,33,35,36,41,42,43,44,51,54,55,58,63,64,65,66,68,69,70,71,72,73,75,76,77,79,80,82,83,84,86,87,88,89,90,],[5,5,-44,5,-44,-44,-44,-36,-37,-38,-39,-44,-24,-25,-44,-19,-44,-7,-28,-29,-8,-42,-43,-10,-13,-5,-18,-6,-44,-30,-31,-32,-33,-34,-35,-41,5,5,5,-9,-40,-11,-44,-4,-12,5,-27,-26,]),'ID':([0,3,5,7,8,9,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,33,34,35,36,41,42,43,44,45,46,47,48,49,50,51,52,54,55,58,63,64,65,66,67,68,69,70,71,72,73,75,76,77,78,79,80,82,83,84,86,87,88,89,90,],[6,6,14,17,23,23,6,-44,23,23,-44,-44,23,-36,-37,-38,-39,23,23,-44,-24,-25,23,23,59,-44,23,-19,-44,-7,-28,-29,-8,23,23,23,23,23,23,-42,23,-43,-10,-13,-5,-18,-6,-44,23,-30,-31,-32,-33,-34,-35,-41,6,6,59,6,-9,-40,-11,-44,-4,-12,6,-27,-26,]),'GET':([0,3,9,12,14,17,18,20,21,22,23,26,27,28,33,35,36,41,42,43,44,51,54,55,58,63,64,65,66,68,69,70,71,72,73,75,76,77,79,80,82,83,84,86,87,88,89,90,],[7,7,-44,7,-44,-44,-44,-36,-37,-38,-39,-44,-24,-25,-44,-19,-44,-7,-28,-29,-8,-42,-43,-10,-13,-5,-18,-6,-44,-30,-31,-32,-33,-34,-35,-41,7,7,7,-9,-40,-11,-44,-4,-12,7,-27,-26,]),'PUT':([0,3,9,12,14,17,18,20,21,22,23,26,27,28,33,35,36,41,42,43,44,51,54,55,58,63,64,65,66,68,69,70,71,72,73,75,76,77,79,80,82,83,84,86,87,88,89,90,],[8,8,-44,8,-44,-44,-44,-36,-37,-38,-39,-44,-24,-25,-44,-19,-44,-7,-28,-29,-8,-42,-43,-10,-13,-5,-18,-6,-44,-30,-31,-32,-33,-34,-35,-41,8,8,8,-9,-40,-11,-44,-4,-12,8,-27,-26,]),'RETURN':([0,3,9,12,14,17,18,20,21,22,23,26,27,28,33,35,36,41,42,43,44,51,54,55,58,63,64,65,66,68,69,70,71,72,73,75,76,77,79,80,82,83,84,86,87,88,89,90,],[9,9,-44,9,-44,-44,-44,-36,-37,-38,-39,-44,-24,-25,-44,-19,-44,-7,-28,-29,-8,-42,-43,-10,-13,-5,-18,-6,-44,-30,-31,-32,-33,-34,-35,-41,9,9,9,-9,-40,-11,-44,-4,-12,9,-27,-26,]),'WHILE':([0,3,9,12,14,17,18,20,21,22,23,26,27,28,33,35,36,41,42,43,44,51,54,55,58,63,64,65,66,68,69,70,71,72,73,75,76,77,79,80,82,83,84,86,87,88,89,90,],[10,10,-44,10,-44,-44,-44,-36,-37,-38,-39,-44,-24,-25,-44,-19,-44,-7,-28,-29,-8,-42,-43,-10,-13,-5,-18,-6,-44,-30,-31,-32,-33,-34,-35,-41,10,10,10,-9,-40,-11,-44,-4,-12,10,-27,-26,]),'IF':([0,3,9,12,14,17,18,20,21,22,23,26,27,28,33,35,36,41,42,43,44,51,54,55,58,63,64,65,66,68,69,70,71,72,73,75,76,77,79,80,82,83,84,86,87,88,89,90,],[11,11,-44,11,-44,-44,-44,-36,-37,-38,-39,-44,-24,-25,-44,-19,-44,-7,-28,-29,-8,-42,-43,-10,-13,-5,-18,-6,-44,-30,-31,-32,-33,-34,-35,-41,11,11,11,-9,-40,-11,-44,-4,-12,11,-27,-26,]),'{':([0,3,9,12,14,17,18,20,21,22,23,26,27,28,33,35,36,41,42,43,44,51,54,55,58,63,64,65,66,68,69,70,71,72,73,75,76,77,79,80,82,83,84,86,87,88,89,90,],[12,12,-44,12,-44,-44,-44,-36,-37,-38,-39,-44,-24,-25,-44,-19,-44,-7,-28,-29,-8,-42,-43,-10,-13,-5,-18,-6,-44,-30,-31,-32,-33,-34,-35,-41,12,12,12,-9,-40,-11,-44,-4,-12,12,-27,-26,]),'$end':([0,1,2,3,4,9,13,14,17,18,20,21,22,23,26,27,28,33,35,36,41,42,43,44,51,54,55,58,63,64,65,66,68,69,70,71,72,73,75,80,82,83,84,86,87,89,90,],[-44,0,-1,-44,-3,-44,-2,-44,-44,-44,-36,-37,-38,-39,-44,-24,-25,-44,-19,-44,-7,-28,-29,-8,-42,-43,-10,-13,-5,-18,-6,-44,-30,-31,-32,-33,-34,-35,-41,-9,-40,-11,-44,-4,-12,-27,-26,]),'}':([3,4,9,12,13,14,17,18,20,21,22,23,26,27,28,31,33,35,36,41,42,43,44,51,54,55,58,63,64,65,66,68,69,70,71,72,73,75,80,82,83,84,86,87,89,90,],[-44,-3,-44,-44,-2,-44,-44,-44,-36,-37,-38,-39,-44,-24,-25,58,-44,-19,-44,-7,-28,-29,-8,-42,-43,-10,-13,-5,-18,-6,-44,-30,-31,-32,-33,-34,-35,-41,-9,-40,-11,-44,-4,-12,-27,-26,]),'=':([6,14,],[15,34,]),'(':([6,8,9,10,11,14,15,16,19,23,24,25,29,30,34,45,46,47,48,49,50,52,67,],[16,24,24,29,30,32,24,24,24,52,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'INTEGER':([8,9,15,16,19,24,25,29,30,34,45,46,47,48,49,50,52,67,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'FLOAT':([8,9,15,16,19,24,25,29,30,34,45,46,47,48,49,50,52,67,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'STRING':([8,9,15,16,19,24,25,29,30,34,45,46,47,48,49,50,52,67,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'MINUS':([8,9,15,16,18,19,20,21,22,23,24,25,27,29,30,34,36,40,45,46,47,48,49,50,51,52,53,54,56,57,64,67,68,69,70,71,72,73,75,82,],[19,19,19,19,46,19,-36,-37,-38,-39,19,19,46,19,19,19,46,46,19,19,19,19,19,19,-42,19,46,-43,46,46,46,19,-30,-31,-32,-33,46,46,-41,-40,]),'NOT':([8,9,15,16,19,24,25,29,30,34,45,46,47,48,49,50,52,67,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),';':([9,14,17,18,20,21,22,23,26,27,28,33,35,36,51,54,64,66,68,69,70,71,72,73,75,82,],[-44,-44,42,42,-36,-37,-38,-39,42,-24,-25,42,-19,42,-42,-43,-18,42,-30,-31,-32,-33,-34,-35,-41,-40,]),'ELSE':([9,14,17,18,20,21,22,23,26,27,28,33,35,36,41,42,43,44,51,54,55,58,63,64,65,66,68,69,70,71,72,73,75,80,82,83,84,86,87,89,90,],[-44,-44,-44,-44,-36,-37,-38,-39,-44,-24,-25,-44,-19,-44,-7,-28,-29,-8,-42,-43,-10,-13,-5,-18,-6,-44,-30,-31,-32,-33,-34,-35,-41,-9,-40,-11,88,-4,-12,-27,-26,]),')':([16,20,21,22,23,32,37,38,39,40,51,52,53,54,56,57,59,60,61,62,68,69,70,71,72,73,74,75,81,82,85,],[-44,-36,-37,-38,-39,-44,66,-20,-21,-23,-42,-44,75,-43,76,77,-17,79,-14,-15,-30,-31,-32,-33,-34,-35,82,-41,-22,-40,-16,]),'PLUS':([18,20,21,22,23,27,36,40,51,53,54,56,57,64,68,69,70,71,72,73,75,82,],[45,-36,-37,-38,-39,45,45,45,-42,45,-43,45,45,45,-30,-31,-32,-33,45,45,-41,-40,]),'TIMES':([18,20,21,22,23,27,36,40,51,53,54,56,57,64,68,69,70,71,72,73,75,82,],[47,-36,-37,-38,-39,47,47,47,-42,47,-43,47,47,47,47,47,-32,-33,47,47,-41,-40,]),'DIVIDE':([18,20,21,22,23,27,36,40,51,53,54,56,57,64,68,69,70,71,72,73,75,82,],[48,-36,-37,-38,-39,48,48,48,-42,48,-43,48,48,48,48,48,-32,-33,48,48,-41,-40,]),'EQ':([18,20,21,22,23,27,36,40,51,53,54,56,57,64,68,69,70,71,72,73,75,82,],[49,-36,-37,-38,-39,49,49,49,-42,49,-43,49,49,49,-30,-31,-32,-33,-34,-35,-41,-40,]),'LE':([18,20,21,22,23,27,36,40,51,53,54,56,57,64,68,69,70,71,72,73,75,82,],[50,-36,-37,-38,-39,50,50,50,-42,50,-43,50,50,50,-30,-31,-32,-33,-34,-35,-41,-40,]),',':([20,21,22,23,40,51,54,59,68,69,70,71,72,73,75,82,],[-36,-37,-38,-39,67,-42,-43,78,-30,-31,-32,-33,-34,-35,-41,-40,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmt_list':([0,3,12,],[2,13,31,]),'stmt':([0,3,12,76,77,79,88,],[3,3,3,83,84,86,90,]),'empty':([0,3,9,12,14,16,17,18,26,32,33,36,52,66,84,],[4,4,28,4,35,39,43,43,43,62,43,43,39,43,89,]),'exp':([8,9,15,16,19,24,25,29,30,34,45,46,47,48,49,50,52,67,],[18,27,36,40,51,53,54,56,57,64,68,69,70,71,72,73,40,40,]),'opt_exp':([9,],[26,]),'opt_init':([14,],[33,]),'opt_actual_args':([16,52,],[37,74,]),'actual_args':([16,52,67,],[38,38,81,]),'opt_semi':([17,18,26,33,36,66,],[41,44,55,63,65,80,]),'opt_formal_args':([32,],[60,]),'formal_args':([32,78,],[61,85,]),'opt_else':([84,],[87,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt_list','program',1,'p_grammar','cuppa4_gram.py',19),
  ('stmt_list -> stmt stmt_list','stmt_list',2,'p_grammar','cuppa4_gram.py',21),
  ('stmt_list -> empty','stmt_list',1,'p_grammar','cuppa4_gram.py',22),
  ('stmt -> DECLARE ID ( opt_formal_args ) stmt','stmt',6,'p_grammar','cuppa4_gram.py',24),
  ('stmt -> DECLARE ID opt_init opt_semi','stmt',4,'p_grammar','cuppa4_gram.py',25),
  ('stmt -> ID = exp opt_semi','stmt',4,'p_grammar','cuppa4_gram.py',26),
  ('stmt -> GET ID opt_semi','stmt',3,'p_grammar','cuppa4_gram.py',27),
  ('stmt -> PUT exp opt_semi','stmt',3,'p_grammar','cuppa4_gram.py',28),
  ('stmt -> ID ( opt_actual_args ) opt_semi','stmt',5,'p_grammar','cuppa4_gram.py',29),
  ('stmt -> RETURN opt_exp opt_semi','stmt',3,'p_grammar','cuppa4_gram.py',30),
  ('stmt -> WHILE ( exp ) stmt','stmt',5,'p_grammar','cuppa4_gram.py',31),
  ('stmt -> IF ( exp ) stmt opt_else','stmt',6,'p_grammar','cuppa4_gram.py',32),
  ('stmt -> { stmt_list }','stmt',3,'p_grammar','cuppa4_gram.py',33),
  ('opt_formal_args -> formal_args','opt_formal_args',1,'p_grammar','cuppa4_gram.py',35),
  ('opt_formal_args -> empty','opt_formal_args',1,'p_grammar','cuppa4_gram.py',36),
  ('formal_args -> ID , formal_args','formal_args',3,'p_grammar','cuppa4_gram.py',38),
  ('formal_args -> ID','formal_args',1,'p_grammar','cuppa4_gram.py',39),
  ('opt_init -> = exp','opt_init',2,'p_grammar','cuppa4_gram.py',41),
  ('opt_init -> empty','opt_init',1,'p_grammar','cuppa4_gram.py',42),
  ('opt_actual_args -> actual_args','opt_actual_args',1,'p_grammar','cuppa4_gram.py',44),
  ('opt_actual_args -> empty','opt_actual_args',1,'p_grammar','cuppa4_gram.py',45),
  ('actual_args -> exp , actual_args','actual_args',3,'p_grammar','cuppa4_gram.py',47),
  ('actual_args -> exp','actual_args',1,'p_grammar','cuppa4_gram.py',48),
  ('opt_exp -> exp','opt_exp',1,'p_grammar','cuppa4_gram.py',50),
  ('opt_exp -> empty','opt_exp',1,'p_grammar','cuppa4_gram.py',51),
  ('opt_else -> ELSE stmt','opt_else',2,'p_grammar','cuppa4_gram.py',53),
  ('opt_else -> empty','opt_else',1,'p_grammar','cuppa4_gram.py',54),
  ('opt_semi -> ;','opt_semi',1,'p_grammar','cuppa4_gram.py',56),
  ('opt_semi -> empty','opt_semi',1,'p_grammar','cuppa4_gram.py',57),
  ('exp -> exp PLUS exp','exp',3,'p_grammar','cuppa4_gram.py',59),
  ('exp -> exp MINUS exp','exp',3,'p_grammar','cuppa4_gram.py',60),
  ('exp -> exp TIMES exp','exp',3,'p_grammar','cuppa4_gram.py',61),
  ('exp -> exp DIVIDE exp','exp',3,'p_grammar','cuppa4_gram.py',62),
  ('exp -> exp EQ exp','exp',3,'p_grammar','cuppa4_gram.py',63),
  ('exp -> exp LE exp','exp',3,'p_grammar','cuppa4_gram.py',64),
  ('exp -> INTEGER','exp',1,'p_grammar','cuppa4_gram.py',65),
  ('exp -> FLOAT','exp',1,'p_grammar','cuppa4_gram.py',66),
  ('exp -> STRING','exp',1,'p_grammar','cuppa4_gram.py',67),
  ('exp -> ID','exp',1,'p_grammar','cuppa4_gram.py',68),
  ('exp -> ID ( opt_actual_args )','exp',4,'p_grammar','cuppa4_gram.py',69),
  ('exp -> ( exp )','exp',3,'p_grammar','cuppa4_gram.py',70),
  ('exp -> MINUS exp','exp',2,'p_grammar','cuppa4_gram.py',71),
  ('exp -> NOT exp','exp',2,'p_grammar','cuppa4_gram.py',72),
  ('empty -> <empty>','empty',0,'p_empty','cuppa4_gram.py',77),
]
