
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftEQLEleftPLUSMINUSleftTIMESDIVIDErightUMINUSNOTDECLARE DIVIDE ELSE EQ GET ID IF INTEGER LE MINUS NOT PLUS PUT TIMES WHILE\n    program : stmt_list\n\n    stmt_list : stmt stmt_list\n              | empty\n\n    stmt : DECLARE ID opt_init opt_semi\n         | ID '=' exp opt_semi\n         | GET ID opt_semi\n         | PUT exp opt_semi\n         | WHILE '(' exp ')' stmt\n         | IF '(' exp ')' stmt opt_else\n         | '{' stmt_list '}'\n\n    opt_init : '=' exp\n             | empty\n             \n    opt_else : ELSE stmt\n             | empty\n             \n    opt_semi : ';'\n             | empty\n\n    exp : exp PLUS exp\n        | exp MINUS exp\n        | exp TIMES exp\n        | exp DIVIDE exp\n        | exp EQ exp\n        | exp LE exp\n        | INTEGER\n        | ID\n        | '(' exp ')'\n        | MINUS exp %prec UMINUS\n        | NOT exp\n    empty :"
    
_lr_action_items = {'DECLARE':([0,3,11,13,15,16,18,19,25,27,28,29,30,31,32,39,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,],[5,5,5,-28,-28,-28,-23,-24,-28,-12,-28,-6,-15,-16,-7,-26,-27,-10,-4,-11,-5,-17,-18,-19,-20,-21,-22,-25,5,5,-8,-28,-9,5,-14,-13,]),'ID':([0,3,5,7,8,11,13,14,15,16,17,18,19,20,21,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,],[6,6,13,15,19,6,-28,19,-28,-28,19,-23,-24,19,19,19,19,-28,19,-12,-28,-6,-15,-16,-7,19,19,19,19,19,19,-26,-27,-10,-4,-11,-5,-17,-18,-19,-20,-21,-22,-25,6,6,-8,-28,-9,6,-14,-13,]),'GET':([0,3,11,13,15,16,18,19,25,27,28,29,30,31,32,39,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,],[7,7,7,-28,-28,-28,-23,-24,-28,-12,-28,-6,-15,-16,-7,-26,-27,-10,-4,-11,-5,-17,-18,-19,-20,-21,-22,-25,7,7,-8,-28,-9,7,-14,-13,]),'PUT':([0,3,11,13,15,16,18,19,25,27,28,29,30,31,32,39,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,],[8,8,8,-28,-28,-28,-23,-24,-28,-12,-28,-6,-15,-16,-7,-26,-27,-10,-4,-11,-5,-17,-18,-19,-20,-21,-22,-25,8,8,-8,-28,-9,8,-14,-13,]),'WHILE':([0,3,11,13,15,16,18,19,25,27,28,29,30,31,32,39,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,],[9,9,9,-28,-28,-28,-23,-24,-28,-12,-28,-6,-15,-16,-7,-26,-27,-10,-4,-11,-5,-17,-18,-19,-20,-21,-22,-25,9,9,-8,-28,-9,9,-14,-13,]),'IF':([0,3,11,13,15,16,18,19,25,27,28,29,30,31,32,39,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,],[10,10,10,-28,-28,-28,-23,-24,-28,-12,-28,-6,-15,-16,-7,-26,-27,-10,-4,-11,-5,-17,-18,-19,-20,-21,-22,-25,10,10,-8,-28,-9,10,-14,-13,]),'{':([0,3,11,13,15,16,18,19,25,27,28,29,30,31,32,39,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,],[11,11,11,-28,-28,-28,-23,-24,-28,-12,-28,-6,-15,-16,-7,-26,-27,-10,-4,-11,-5,-17,-18,-19,-20,-21,-22,-25,11,11,-8,-28,-9,11,-14,-13,]),'$end':([0,1,2,3,4,12,13,15,16,18,19,25,27,28,29,30,31,32,39,41,44,45,46,47,48,49,50,51,52,53,54,57,58,59,61,62,],[-28,0,-1,-28,-3,-2,-28,-28,-28,-23,-24,-28,-12,-28,-6,-15,-16,-7,-26,-27,-10,-4,-11,-5,-17,-18,-19,-20,-21,-22,-25,-8,-28,-9,-14,-13,]),'}':([3,4,11,12,13,15,16,18,19,24,25,27,28,29,30,31,32,39,41,44,45,46,47,48,49,50,51,52,53,54,57,58,59,61,62,],[-28,-3,-28,-2,-28,-28,-28,-23,-24,44,-28,-12,-28,-6,-15,-16,-7,-26,-27,-10,-4,-11,-5,-17,-18,-19,-20,-21,-22,-25,-8,-28,-9,-14,-13,]),'=':([6,13,],[14,26,]),'INTEGER':([8,14,17,20,21,22,23,26,33,34,35,36,37,38,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'(':([8,9,10,14,17,20,21,22,23,26,33,34,35,36,37,38,],[20,22,23,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'MINUS':([8,14,16,17,18,19,20,21,22,23,26,28,33,34,35,36,37,38,39,40,41,42,43,46,48,49,50,51,52,53,54,],[17,17,34,17,-23,-24,17,17,17,17,17,34,17,17,17,17,17,17,-26,34,-27,34,34,34,-17,-18,-19,-20,34,34,-25,]),'NOT':([8,14,17,20,21,22,23,26,33,34,35,36,37,38,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),';':([13,15,16,18,19,25,27,28,39,41,46,48,49,50,51,52,53,54,],[-28,30,30,-23,-24,30,-12,30,-26,-27,-11,-17,-18,-19,-20,-21,-22,-25,]),'ELSE':([13,15,16,18,19,25,27,28,29,30,31,32,39,41,44,45,46,47,48,49,50,51,52,53,54,57,58,59,61,62,],[-28,-28,-28,-23,-24,-28,-12,-28,-6,-15,-16,-7,-26,-27,-10,-4,-11,-5,-17,-18,-19,-20,-21,-22,-25,-8,60,-9,-14,-13,]),'PLUS':([16,18,19,28,39,40,41,42,43,46,48,49,50,51,52,53,54,],[33,-23,-24,33,-26,33,-27,33,33,33,-17,-18,-19,-20,33,33,-25,]),'TIMES':([16,18,19,28,39,40,41,42,43,46,48,49,50,51,52,53,54,],[35,-23,-24,35,-26,35,-27,35,35,35,35,35,-19,-20,35,35,-25,]),'DIVIDE':([16,18,19,28,39,40,41,42,43,46,48,49,50,51,52,53,54,],[36,-23,-24,36,-26,36,-27,36,36,36,36,36,-19,-20,36,36,-25,]),'EQ':([16,18,19,28,39,40,41,42,43,46,48,49,50,51,52,53,54,],[37,-23,-24,37,-26,37,-27,37,37,37,-17,-18,-19,-20,-21,-22,-25,]),'LE':([16,18,19,28,39,40,41,42,43,46,48,49,50,51,52,53,54,],[38,-23,-24,38,-26,38,-27,38,38,38,-17,-18,-19,-20,-21,-22,-25,]),')':([18,19,39,40,41,42,43,48,49,50,51,52,53,54,],[-23,-24,-26,54,-27,55,56,-17,-18,-19,-20,-21,-22,-25,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmt_list':([0,3,11,],[2,12,24,]),'stmt':([0,3,11,55,56,60,],[3,3,3,57,58,62,]),'empty':([0,3,11,13,15,16,25,28,58,],[4,4,4,27,31,31,31,31,61,]),'exp':([8,14,17,20,21,22,23,26,33,34,35,36,37,38,],[16,28,39,40,41,42,43,46,48,49,50,51,52,53,]),'opt_init':([13,],[25,]),'opt_semi':([15,16,25,28,],[29,32,45,47,]),'opt_else':([58,],[59,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt_list','program',1,'p_grammar','cuppa2_gram.py',19),
  ('stmt_list -> stmt stmt_list','stmt_list',2,'p_grammar','cuppa2_gram.py',21),
  ('stmt_list -> empty','stmt_list',1,'p_grammar','cuppa2_gram.py',22),
  ('stmt -> DECLARE ID opt_init opt_semi','stmt',4,'p_grammar','cuppa2_gram.py',24),
  ('stmt -> ID = exp opt_semi','stmt',4,'p_grammar','cuppa2_gram.py',25),
  ('stmt -> GET ID opt_semi','stmt',3,'p_grammar','cuppa2_gram.py',26),
  ('stmt -> PUT exp opt_semi','stmt',3,'p_grammar','cuppa2_gram.py',27),
  ('stmt -> WHILE ( exp ) stmt','stmt',5,'p_grammar','cuppa2_gram.py',28),
  ('stmt -> IF ( exp ) stmt opt_else','stmt',6,'p_grammar','cuppa2_gram.py',29),
  ('stmt -> { stmt_list }','stmt',3,'p_grammar','cuppa2_gram.py',30),
  ('opt_init -> = exp','opt_init',2,'p_grammar','cuppa2_gram.py',32),
  ('opt_init -> empty','opt_init',1,'p_grammar','cuppa2_gram.py',33),
  ('opt_else -> ELSE stmt','opt_else',2,'p_grammar','cuppa2_gram.py',35),
  ('opt_else -> empty','opt_else',1,'p_grammar','cuppa2_gram.py',36),
  ('opt_semi -> ;','opt_semi',1,'p_grammar','cuppa2_gram.py',38),
  ('opt_semi -> empty','opt_semi',1,'p_grammar','cuppa2_gram.py',39),
  ('exp -> exp PLUS exp','exp',3,'p_grammar','cuppa2_gram.py',41),
  ('exp -> exp MINUS exp','exp',3,'p_grammar','cuppa2_gram.py',42),
  ('exp -> exp TIMES exp','exp',3,'p_grammar','cuppa2_gram.py',43),
  ('exp -> exp DIVIDE exp','exp',3,'p_grammar','cuppa2_gram.py',44),
  ('exp -> exp EQ exp','exp',3,'p_grammar','cuppa2_gram.py',45),
  ('exp -> exp LE exp','exp',3,'p_grammar','cuppa2_gram.py',46),
  ('exp -> INTEGER','exp',1,'p_grammar','cuppa2_gram.py',47),
  ('exp -> ID','exp',1,'p_grammar','cuppa2_gram.py',48),
  ('exp -> ( exp )','exp',3,'p_grammar','cuppa2_gram.py',49),
  ('exp -> MINUS exp','exp',2,'p_grammar','cuppa2_gram.py',50),
  ('exp -> NOT exp','exp',2,'p_grammar','cuppa2_gram.py',51),
  ('empty -> <empty>','empty',0,'p_empty','cuppa2_gram.py',56),
]
