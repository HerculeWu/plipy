Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> prog
Rule 1     prog -> stmt_list
Rule 2     stmt_list -> labeled_stmt stmt_list
Rule 3     stmt_list -> empty
Rule 4     labeled_stmt -> label_def stmt
Rule 5     label_def -> NAME :
Rule 6     label_def -> empty
Rule 7     stmt -> PRINT exp ;
Rule 8     stmt -> STORE NAME exp ;
Rule 9     stmt -> JUMPT exp label ;
Rule 10    stmt -> JUMPF exp label ;
Rule 11    stmt -> JUMP label ;
Rule 12    stmt -> STOP ;
Rule 13    stmt -> NOOP ;
Rule 14    label -> NAME
Rule 15    exp -> + exp exp
Rule 16    exp -> - exp exp
Rule 17    exp -> * exp exp
Rule 18    exp -> / exp exp
Rule 19    exp -> EQ exp exp
Rule 20    exp -> LE exp exp
Rule 21    exp -> - exp
Rule 22    exp -> ( exp )
Rule 23    exp -> NAME
Rule 24    exp -> NUMBER
Rule 25    empty -> <empty>

Terminals, with rules where they appear

(                    : 22
)                    : 22
*                    : 17
+                    : 15
-                    : 16 21
/                    : 18
:                    : 5
;                    : 7 8 9 10 11 12 13
EQ                   : 19
JUMP                 : 11
JUMPF                : 10
JUMPT                : 9
LE                   : 20
NAME                 : 5 8 14 23
NOOP                 : 13
NUMBER               : 24
PRINT                : 7
STOP                 : 12
STORE                : 8
error                : 

Nonterminals, with rules where they appear

empty                : 3 6
exp                  : 7 8 9 10 15 15 16 16 17 17 18 18 19 19 20 20 21 22
label                : 9 10 11
label_def            : 4
labeled_stmt         : 2
prog                 : 0
stmt                 : 4
stmt_list            : 1 2

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . stmt_list
    (2) stmt_list -> . labeled_stmt stmt_list
    (3) stmt_list -> . empty
    (4) labeled_stmt -> . label_def stmt
    (25) empty -> .
    (5) label_def -> . NAME :
    (6) label_def -> . empty

    $end            reduce using rule 25 (empty -> .)
    PRINT           reduce using rule 25 (empty -> .)
    STORE           reduce using rule 25 (empty -> .)
    JUMPT           reduce using rule 25 (empty -> .)
    JUMPF           reduce using rule 25 (empty -> .)
    JUMP            reduce using rule 25 (empty -> .)
    STOP            reduce using rule 25 (empty -> .)
    NOOP            reduce using rule 25 (empty -> .)
    NAME            shift and go to state 6

    prog                           shift and go to state 1
    stmt_list                      shift and go to state 2
    labeled_stmt                   shift and go to state 3
    empty                          shift and go to state 4
    label_def                      shift and go to state 5

state 1

    (0) S' -> prog .



state 2

    (1) prog -> stmt_list .

    $end            reduce using rule 1 (prog -> stmt_list .)


state 3

    (2) stmt_list -> labeled_stmt . stmt_list
    (2) stmt_list -> . labeled_stmt stmt_list
    (3) stmt_list -> . empty
    (4) labeled_stmt -> . label_def stmt
    (25) empty -> .
    (5) label_def -> . NAME :
    (6) label_def -> . empty

    $end            reduce using rule 25 (empty -> .)
    PRINT           reduce using rule 25 (empty -> .)
    STORE           reduce using rule 25 (empty -> .)
    JUMPT           reduce using rule 25 (empty -> .)
    JUMPF           reduce using rule 25 (empty -> .)
    JUMP            reduce using rule 25 (empty -> .)
    STOP            reduce using rule 25 (empty -> .)
    NOOP            reduce using rule 25 (empty -> .)
    NAME            shift and go to state 6

    labeled_stmt                   shift and go to state 3
    stmt_list                      shift and go to state 7
    empty                          shift and go to state 4
    label_def                      shift and go to state 5

state 4

    (3) stmt_list -> empty .
    (6) label_def -> empty .

    $end            reduce using rule 3 (stmt_list -> empty .)
    PRINT           reduce using rule 6 (label_def -> empty .)
    STORE           reduce using rule 6 (label_def -> empty .)
    JUMPT           reduce using rule 6 (label_def -> empty .)
    JUMPF           reduce using rule 6 (label_def -> empty .)
    JUMP            reduce using rule 6 (label_def -> empty .)
    STOP            reduce using rule 6 (label_def -> empty .)
    NOOP            reduce using rule 6 (label_def -> empty .)


state 5

    (4) labeled_stmt -> label_def . stmt
    (7) stmt -> . PRINT exp ;
    (8) stmt -> . STORE NAME exp ;
    (9) stmt -> . JUMPT exp label ;
    (10) stmt -> . JUMPF exp label ;
    (11) stmt -> . JUMP label ;
    (12) stmt -> . STOP ;
    (13) stmt -> . NOOP ;

    PRINT           shift and go to state 9
    STORE           shift and go to state 10
    JUMPT           shift and go to state 11
    JUMPF           shift and go to state 12
    JUMP            shift and go to state 13
    STOP            shift and go to state 14
    NOOP            shift and go to state 15

    stmt                           shift and go to state 8

state 6

    (5) label_def -> NAME . :

    :               shift and go to state 16


state 7

    (2) stmt_list -> labeled_stmt stmt_list .

    $end            reduce using rule 2 (stmt_list -> labeled_stmt stmt_list .)


state 8

    (4) labeled_stmt -> label_def stmt .

    NAME            reduce using rule 4 (labeled_stmt -> label_def stmt .)
    PRINT           reduce using rule 4 (labeled_stmt -> label_def stmt .)
    STORE           reduce using rule 4 (labeled_stmt -> label_def stmt .)
    JUMPT           reduce using rule 4 (labeled_stmt -> label_def stmt .)
    JUMPF           reduce using rule 4 (labeled_stmt -> label_def stmt .)
    JUMP            reduce using rule 4 (labeled_stmt -> label_def stmt .)
    STOP            reduce using rule 4 (labeled_stmt -> label_def stmt .)
    NOOP            reduce using rule 4 (labeled_stmt -> label_def stmt .)
    $end            reduce using rule 4 (labeled_stmt -> label_def stmt .)


state 9

    (7) stmt -> PRINT . exp ;
    (15) exp -> . + exp exp
    (16) exp -> . - exp exp
    (17) exp -> . * exp exp
    (18) exp -> . / exp exp
    (19) exp -> . EQ exp exp
    (20) exp -> . LE exp exp
    (21) exp -> . - exp
    (22) exp -> . ( exp )
    (23) exp -> . NAME
    (24) exp -> . NUMBER

    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21
    EQ              shift and go to state 22
    LE              shift and go to state 23
    (               shift and go to state 24
    NAME            shift and go to state 25
    NUMBER          shift and go to state 26

    exp                            shift and go to state 17

state 10

    (8) stmt -> STORE . NAME exp ;

    NAME            shift and go to state 27


state 11

    (9) stmt -> JUMPT . exp label ;
    (15) exp -> . + exp exp
    (16) exp -> . - exp exp
    (17) exp -> . * exp exp
    (18) exp -> . / exp exp
    (19) exp -> . EQ exp exp
    (20) exp -> . LE exp exp
    (21) exp -> . - exp
    (22) exp -> . ( exp )
    (23) exp -> . NAME
    (24) exp -> . NUMBER

    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21
    EQ              shift and go to state 22
    LE              shift and go to state 23
    (               shift and go to state 24
    NAME            shift and go to state 25
    NUMBER          shift and go to state 26

    exp                            shift and go to state 28

state 12

    (10) stmt -> JUMPF . exp label ;
    (15) exp -> . + exp exp
    (16) exp -> . - exp exp
    (17) exp -> . * exp exp
    (18) exp -> . / exp exp
    (19) exp -> . EQ exp exp
    (20) exp -> . LE exp exp
    (21) exp -> . - exp
    (22) exp -> . ( exp )
    (23) exp -> . NAME
    (24) exp -> . NUMBER

    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21
    EQ              shift and go to state 22
    LE              shift and go to state 23
    (               shift and go to state 24
    NAME            shift and go to state 25
    NUMBER          shift and go to state 26

    exp                            shift and go to state 29

state 13

    (11) stmt -> JUMP . label ;
    (14) label -> . NAME

    NAME            shift and go to state 31

    label                          shift and go to state 30

state 14

    (12) stmt -> STOP . ;

    ;               shift and go to state 32


state 15

    (13) stmt -> NOOP . ;

    ;               shift and go to state 33


state 16

    (5) label_def -> NAME : .

    PRINT           reduce using rule 5 (label_def -> NAME : .)
    STORE           reduce using rule 5 (label_def -> NAME : .)
    JUMPT           reduce using rule 5 (label_def -> NAME : .)
    JUMPF           reduce using rule 5 (label_def -> NAME : .)
    JUMP            reduce using rule 5 (label_def -> NAME : .)
    STOP            reduce using rule 5 (label_def -> NAME : .)
    NOOP            reduce using rule 5 (label_def -> NAME : .)


state 17

    (7) stmt -> PRINT exp . ;

    ;               shift and go to state 34


state 18

    (15) exp -> + . exp exp
    (15) exp -> . + exp exp
    (16) exp -> . - exp exp
    (17) exp -> . * exp exp
    (18) exp -> . / exp exp
    (19) exp -> . EQ exp exp
    (20) exp -> . LE exp exp
    (21) exp -> . - exp
    (22) exp -> . ( exp )
    (23) exp -> . NAME
    (24) exp -> . NUMBER

    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21
    EQ              shift and go to state 22
    LE              shift and go to state 23
    (               shift and go to state 24
    NAME            shift and go to state 25
    NUMBER          shift and go to state 26

    exp                            shift and go to state 35

state 19

    (16) exp -> - . exp exp
    (21) exp -> - . exp
    (15) exp -> . + exp exp
    (16) exp -> . - exp exp
    (17) exp -> . * exp exp
    (18) exp -> . / exp exp
    (19) exp -> . EQ exp exp
    (20) exp -> . LE exp exp
    (21) exp -> . - exp
    (22) exp -> . ( exp )
    (23) exp -> . NAME
    (24) exp -> . NUMBER

    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21
    EQ              shift and go to state 22
    LE              shift and go to state 23
    (               shift and go to state 24
    NAME            shift and go to state 25
    NUMBER          shift and go to state 26

    exp                            shift and go to state 36

state 20

    (17) exp -> * . exp exp
    (15) exp -> . + exp exp
    (16) exp -> . - exp exp
    (17) exp -> . * exp exp
    (18) exp -> . / exp exp
    (19) exp -> . EQ exp exp
    (20) exp -> . LE exp exp
    (21) exp -> . - exp
    (22) exp -> . ( exp )
    (23) exp -> . NAME
    (24) exp -> . NUMBER

    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21
    EQ              shift and go to state 22
    LE              shift and go to state 23
    (               shift and go to state 24
    NAME            shift and go to state 25
    NUMBER          shift and go to state 26

    exp                            shift and go to state 37

state 21

    (18) exp -> / . exp exp
    (15) exp -> . + exp exp
    (16) exp -> . - exp exp
    (17) exp -> . * exp exp
    (18) exp -> . / exp exp
    (19) exp -> . EQ exp exp
    (20) exp -> . LE exp exp
    (21) exp -> . - exp
    (22) exp -> . ( exp )
    (23) exp -> . NAME
    (24) exp -> . NUMBER

    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21
    EQ              shift and go to state 22
    LE              shift and go to state 23
    (               shift and go to state 24
    NAME            shift and go to state 25
    NUMBER          shift and go to state 26

    exp                            shift and go to state 38

state 22

    (19) exp -> EQ . exp exp
    (15) exp -> . + exp exp
    (16) exp -> . - exp exp
    (17) exp -> . * exp exp
    (18) exp -> . / exp exp
    (19) exp -> . EQ exp exp
    (20) exp -> . LE exp exp
    (21) exp -> . - exp
    (22) exp -> . ( exp )
    (23) exp -> . NAME
    (24) exp -> . NUMBER

    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21
    EQ              shift and go to state 22
    LE              shift and go to state 23
    (               shift and go to state 24
    NAME            shift and go to state 25
    NUMBER          shift and go to state 26

    exp                            shift and go to state 39

state 23

    (20) exp -> LE . exp exp
    (15) exp -> . + exp exp
    (16) exp -> . - exp exp
    (17) exp -> . * exp exp
    (18) exp -> . / exp exp
    (19) exp -> . EQ exp exp
    (20) exp -> . LE exp exp
    (21) exp -> . - exp
    (22) exp -> . ( exp )
    (23) exp -> . NAME
    (24) exp -> . NUMBER

    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21
    EQ              shift and go to state 22
    LE              shift and go to state 23
    (               shift and go to state 24
    NAME            shift and go to state 25
    NUMBER          shift and go to state 26

    exp                            shift and go to state 40

state 24

    (22) exp -> ( . exp )
    (15) exp -> . + exp exp
    (16) exp -> . - exp exp
    (17) exp -> . * exp exp
    (18) exp -> . / exp exp
    (19) exp -> . EQ exp exp
    (20) exp -> . LE exp exp
    (21) exp -> . - exp
    (22) exp -> . ( exp )
    (23) exp -> . NAME
    (24) exp -> . NUMBER

    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21
    EQ              shift and go to state 22
    LE              shift and go to state 23
    (               shift and go to state 24
    NAME            shift and go to state 25
    NUMBER          shift and go to state 26

    exp                            shift and go to state 41

state 25

    (23) exp -> NAME .

    ;               reduce using rule 23 (exp -> NAME .)
    NAME            reduce using rule 23 (exp -> NAME .)
    +               reduce using rule 23 (exp -> NAME .)
    -               reduce using rule 23 (exp -> NAME .)
    *               reduce using rule 23 (exp -> NAME .)
    /               reduce using rule 23 (exp -> NAME .)
    EQ              reduce using rule 23 (exp -> NAME .)
    LE              reduce using rule 23 (exp -> NAME .)
    (               reduce using rule 23 (exp -> NAME .)
    NUMBER          reduce using rule 23 (exp -> NAME .)
    )               reduce using rule 23 (exp -> NAME .)


state 26

    (24) exp -> NUMBER .

    ;               reduce using rule 24 (exp -> NUMBER .)
    NAME            reduce using rule 24 (exp -> NUMBER .)
    +               reduce using rule 24 (exp -> NUMBER .)
    -               reduce using rule 24 (exp -> NUMBER .)
    *               reduce using rule 24 (exp -> NUMBER .)
    /               reduce using rule 24 (exp -> NUMBER .)
    EQ              reduce using rule 24 (exp -> NUMBER .)
    LE              reduce using rule 24 (exp -> NUMBER .)
    (               reduce using rule 24 (exp -> NUMBER .)
    NUMBER          reduce using rule 24 (exp -> NUMBER .)
    )               reduce using rule 24 (exp -> NUMBER .)


state 27

    (8) stmt -> STORE NAME . exp ;
    (15) exp -> . + exp exp
    (16) exp -> . - exp exp
    (17) exp -> . * exp exp
    (18) exp -> . / exp exp
    (19) exp -> . EQ exp exp
    (20) exp -> . LE exp exp
    (21) exp -> . - exp
    (22) exp -> . ( exp )
    (23) exp -> . NAME
    (24) exp -> . NUMBER

    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21
    EQ              shift and go to state 22
    LE              shift and go to state 23
    (               shift and go to state 24
    NAME            shift and go to state 25
    NUMBER          shift and go to state 26

    exp                            shift and go to state 42

state 28

    (9) stmt -> JUMPT exp . label ;
    (14) label -> . NAME

    NAME            shift and go to state 31

    label                          shift and go to state 43

state 29

    (10) stmt -> JUMPF exp . label ;
    (14) label -> . NAME

    NAME            shift and go to state 31

    label                          shift and go to state 44

state 30

    (11) stmt -> JUMP label . ;

    ;               shift and go to state 45


state 31

    (14) label -> NAME .

    ;               reduce using rule 14 (label -> NAME .)


state 32

    (12) stmt -> STOP ; .

    NAME            reduce using rule 12 (stmt -> STOP ; .)
    PRINT           reduce using rule 12 (stmt -> STOP ; .)
    STORE           reduce using rule 12 (stmt -> STOP ; .)
    JUMPT           reduce using rule 12 (stmt -> STOP ; .)
    JUMPF           reduce using rule 12 (stmt -> STOP ; .)
    JUMP            reduce using rule 12 (stmt -> STOP ; .)
    STOP            reduce using rule 12 (stmt -> STOP ; .)
    NOOP            reduce using rule 12 (stmt -> STOP ; .)
    $end            reduce using rule 12 (stmt -> STOP ; .)


state 33

    (13) stmt -> NOOP ; .

    NAME            reduce using rule 13 (stmt -> NOOP ; .)
    PRINT           reduce using rule 13 (stmt -> NOOP ; .)
    STORE           reduce using rule 13 (stmt -> NOOP ; .)
    JUMPT           reduce using rule 13 (stmt -> NOOP ; .)
    JUMPF           reduce using rule 13 (stmt -> NOOP ; .)
    JUMP            reduce using rule 13 (stmt -> NOOP ; .)
    STOP            reduce using rule 13 (stmt -> NOOP ; .)
    NOOP            reduce using rule 13 (stmt -> NOOP ; .)
    $end            reduce using rule 13 (stmt -> NOOP ; .)


state 34

    (7) stmt -> PRINT exp ; .

    NAME            reduce using rule 7 (stmt -> PRINT exp ; .)
    PRINT           reduce using rule 7 (stmt -> PRINT exp ; .)
    STORE           reduce using rule 7 (stmt -> PRINT exp ; .)
    JUMPT           reduce using rule 7 (stmt -> PRINT exp ; .)
    JUMPF           reduce using rule 7 (stmt -> PRINT exp ; .)
    JUMP            reduce using rule 7 (stmt -> PRINT exp ; .)
    STOP            reduce using rule 7 (stmt -> PRINT exp ; .)
    NOOP            reduce using rule 7 (stmt -> PRINT exp ; .)
    $end            reduce using rule 7 (stmt -> PRINT exp ; .)


state 35

    (15) exp -> + exp . exp
    (15) exp -> . + exp exp
    (16) exp -> . - exp exp
    (17) exp -> . * exp exp
    (18) exp -> . / exp exp
    (19) exp -> . EQ exp exp
    (20) exp -> . LE exp exp
    (21) exp -> . - exp
    (22) exp -> . ( exp )
    (23) exp -> . NAME
    (24) exp -> . NUMBER

    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21
    EQ              shift and go to state 22
    LE              shift and go to state 23
    (               shift and go to state 24
    NAME            shift and go to state 25
    NUMBER          shift and go to state 26

    exp                            shift and go to state 46

state 36

    (16) exp -> - exp . exp
    (21) exp -> - exp .
    (15) exp -> . + exp exp
    (16) exp -> . - exp exp
    (17) exp -> . * exp exp
    (18) exp -> . / exp exp
    (19) exp -> . EQ exp exp
    (20) exp -> . LE exp exp
    (21) exp -> . - exp
    (22) exp -> . ( exp )
    (23) exp -> . NAME
    (24) exp -> . NUMBER

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
    ;               reduce using rule 21 (exp -> - exp .)
    )               reduce using rule 21 (exp -> - exp .)
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21
    EQ              shift and go to state 22
    LE              shift and go to state 23
    (               shift and go to state 24
    NAME            shift and go to state 25
    NUMBER          shift and go to state 26

  ! NAME            [ reduce using rule 21 (exp -> - exp .) ]
  ! +               [ reduce using rule 21 (exp -> - exp .) ]
  ! -               [ reduce using rule 21 (exp -> - exp .) ]
  ! *               [ reduce using rule 21 (exp -> - exp .) ]
  ! /               [ reduce using rule 21 (exp -> - exp .) ]
  ! EQ              [ reduce using rule 21 (exp -> - exp .) ]
  ! LE              [ reduce using rule 21 (exp -> - exp .) ]
  ! (               [ reduce using rule 21 (exp -> - exp .) ]
  ! NUMBER          [ reduce using rule 21 (exp -> - exp .) ]

    exp                            shift and go to state 47

state 37

    (17) exp -> * exp . exp
    (15) exp -> . + exp exp
    (16) exp -> . - exp exp
    (17) exp -> . * exp exp
    (18) exp -> . / exp exp
    (19) exp -> . EQ exp exp
    (20) exp -> . LE exp exp
    (21) exp -> . - exp
    (22) exp -> . ( exp )
    (23) exp -> . NAME
    (24) exp -> . NUMBER

    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21
    EQ              shift and go to state 22
    LE              shift and go to state 23
    (               shift and go to state 24
    NAME            shift and go to state 25
    NUMBER          shift and go to state 26

    exp                            shift and go to state 48

state 38

    (18) exp -> / exp . exp
    (15) exp -> . + exp exp
    (16) exp -> . - exp exp
    (17) exp -> . * exp exp
    (18) exp -> . / exp exp
    (19) exp -> . EQ exp exp
    (20) exp -> . LE exp exp
    (21) exp -> . - exp
    (22) exp -> . ( exp )
    (23) exp -> . NAME
    (24) exp -> . NUMBER

    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21
    EQ              shift and go to state 22
    LE              shift and go to state 23
    (               shift and go to state 24
    NAME            shift and go to state 25
    NUMBER          shift and go to state 26

    exp                            shift and go to state 49

state 39

    (19) exp -> EQ exp . exp
    (15) exp -> . + exp exp
    (16) exp -> . - exp exp
    (17) exp -> . * exp exp
    (18) exp -> . / exp exp
    (19) exp -> . EQ exp exp
    (20) exp -> . LE exp exp
    (21) exp -> . - exp
    (22) exp -> . ( exp )
    (23) exp -> . NAME
    (24) exp -> . NUMBER

    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21
    EQ              shift and go to state 22
    LE              shift and go to state 23
    (               shift and go to state 24
    NAME            shift and go to state 25
    NUMBER          shift and go to state 26

    exp                            shift and go to state 50

state 40

    (20) exp -> LE exp . exp
    (15) exp -> . + exp exp
    (16) exp -> . - exp exp
    (17) exp -> . * exp exp
    (18) exp -> . / exp exp
    (19) exp -> . EQ exp exp
    (20) exp -> . LE exp exp
    (21) exp -> . - exp
    (22) exp -> . ( exp )
    (23) exp -> . NAME
    (24) exp -> . NUMBER

    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21
    EQ              shift and go to state 22
    LE              shift and go to state 23
    (               shift and go to state 24
    NAME            shift and go to state 25
    NUMBER          shift and go to state 26

    exp                            shift and go to state 51

state 41

    (22) exp -> ( exp . )

    )               shift and go to state 52


state 42

    (8) stmt -> STORE NAME exp . ;

    ;               shift and go to state 53


state 43

    (9) stmt -> JUMPT exp label . ;

    ;               shift and go to state 54


state 44

    (10) stmt -> JUMPF exp label . ;

    ;               shift and go to state 55


state 45

    (11) stmt -> JUMP label ; .

    NAME            reduce using rule 11 (stmt -> JUMP label ; .)
    PRINT           reduce using rule 11 (stmt -> JUMP label ; .)
    STORE           reduce using rule 11 (stmt -> JUMP label ; .)
    JUMPT           reduce using rule 11 (stmt -> JUMP label ; .)
    JUMPF           reduce using rule 11 (stmt -> JUMP label ; .)
    JUMP            reduce using rule 11 (stmt -> JUMP label ; .)
    STOP            reduce using rule 11 (stmt -> JUMP label ; .)
    NOOP            reduce using rule 11 (stmt -> JUMP label ; .)
    $end            reduce using rule 11 (stmt -> JUMP label ; .)


state 46

    (15) exp -> + exp exp .

    ;               reduce using rule 15 (exp -> + exp exp .)
    NAME            reduce using rule 15 (exp -> + exp exp .)
    +               reduce using rule 15 (exp -> + exp exp .)
    -               reduce using rule 15 (exp -> + exp exp .)
    *               reduce using rule 15 (exp -> + exp exp .)
    /               reduce using rule 15 (exp -> + exp exp .)
    EQ              reduce using rule 15 (exp -> + exp exp .)
    LE              reduce using rule 15 (exp -> + exp exp .)
    (               reduce using rule 15 (exp -> + exp exp .)
    NUMBER          reduce using rule 15 (exp -> + exp exp .)
    )               reduce using rule 15 (exp -> + exp exp .)


state 47

    (16) exp -> - exp exp .

    ;               reduce using rule 16 (exp -> - exp exp .)
    NAME            reduce using rule 16 (exp -> - exp exp .)
    +               reduce using rule 16 (exp -> - exp exp .)
    -               reduce using rule 16 (exp -> - exp exp .)
    *               reduce using rule 16 (exp -> - exp exp .)
    /               reduce using rule 16 (exp -> - exp exp .)
    EQ              reduce using rule 16 (exp -> - exp exp .)
    LE              reduce using rule 16 (exp -> - exp exp .)
    (               reduce using rule 16 (exp -> - exp exp .)
    NUMBER          reduce using rule 16 (exp -> - exp exp .)
    )               reduce using rule 16 (exp -> - exp exp .)


state 48

    (17) exp -> * exp exp .

    ;               reduce using rule 17 (exp -> * exp exp .)
    NAME            reduce using rule 17 (exp -> * exp exp .)
    +               reduce using rule 17 (exp -> * exp exp .)
    -               reduce using rule 17 (exp -> * exp exp .)
    *               reduce using rule 17 (exp -> * exp exp .)
    /               reduce using rule 17 (exp -> * exp exp .)
    EQ              reduce using rule 17 (exp -> * exp exp .)
    LE              reduce using rule 17 (exp -> * exp exp .)
    (               reduce using rule 17 (exp -> * exp exp .)
    NUMBER          reduce using rule 17 (exp -> * exp exp .)
    )               reduce using rule 17 (exp -> * exp exp .)


state 49

    (18) exp -> / exp exp .

    ;               reduce using rule 18 (exp -> / exp exp .)
    NAME            reduce using rule 18 (exp -> / exp exp .)
    +               reduce using rule 18 (exp -> / exp exp .)
    -               reduce using rule 18 (exp -> / exp exp .)
    *               reduce using rule 18 (exp -> / exp exp .)
    /               reduce using rule 18 (exp -> / exp exp .)
    EQ              reduce using rule 18 (exp -> / exp exp .)
    LE              reduce using rule 18 (exp -> / exp exp .)
    (               reduce using rule 18 (exp -> / exp exp .)
    NUMBER          reduce using rule 18 (exp -> / exp exp .)
    )               reduce using rule 18 (exp -> / exp exp .)


state 50

    (19) exp -> EQ exp exp .

    ;               reduce using rule 19 (exp -> EQ exp exp .)
    NAME            reduce using rule 19 (exp -> EQ exp exp .)
    +               reduce using rule 19 (exp -> EQ exp exp .)
    -               reduce using rule 19 (exp -> EQ exp exp .)
    *               reduce using rule 19 (exp -> EQ exp exp .)
    /               reduce using rule 19 (exp -> EQ exp exp .)
    EQ              reduce using rule 19 (exp -> EQ exp exp .)
    LE              reduce using rule 19 (exp -> EQ exp exp .)
    (               reduce using rule 19 (exp -> EQ exp exp .)
    NUMBER          reduce using rule 19 (exp -> EQ exp exp .)
    )               reduce using rule 19 (exp -> EQ exp exp .)


state 51

    (20) exp -> LE exp exp .

    ;               reduce using rule 20 (exp -> LE exp exp .)
    NAME            reduce using rule 20 (exp -> LE exp exp .)
    +               reduce using rule 20 (exp -> LE exp exp .)
    -               reduce using rule 20 (exp -> LE exp exp .)
    *               reduce using rule 20 (exp -> LE exp exp .)
    /               reduce using rule 20 (exp -> LE exp exp .)
    EQ              reduce using rule 20 (exp -> LE exp exp .)
    LE              reduce using rule 20 (exp -> LE exp exp .)
    (               reduce using rule 20 (exp -> LE exp exp .)
    NUMBER          reduce using rule 20 (exp -> LE exp exp .)
    )               reduce using rule 20 (exp -> LE exp exp .)


state 52

    (22) exp -> ( exp ) .

    ;               reduce using rule 22 (exp -> ( exp ) .)
    NAME            reduce using rule 22 (exp -> ( exp ) .)
    +               reduce using rule 22 (exp -> ( exp ) .)
    -               reduce using rule 22 (exp -> ( exp ) .)
    *               reduce using rule 22 (exp -> ( exp ) .)
    /               reduce using rule 22 (exp -> ( exp ) .)
    EQ              reduce using rule 22 (exp -> ( exp ) .)
    LE              reduce using rule 22 (exp -> ( exp ) .)
    (               reduce using rule 22 (exp -> ( exp ) .)
    NUMBER          reduce using rule 22 (exp -> ( exp ) .)
    )               reduce using rule 22 (exp -> ( exp ) .)


state 53

    (8) stmt -> STORE NAME exp ; .

    NAME            reduce using rule 8 (stmt -> STORE NAME exp ; .)
    PRINT           reduce using rule 8 (stmt -> STORE NAME exp ; .)
    STORE           reduce using rule 8 (stmt -> STORE NAME exp ; .)
    JUMPT           reduce using rule 8 (stmt -> STORE NAME exp ; .)
    JUMPF           reduce using rule 8 (stmt -> STORE NAME exp ; .)
    JUMP            reduce using rule 8 (stmt -> STORE NAME exp ; .)
    STOP            reduce using rule 8 (stmt -> STORE NAME exp ; .)
    NOOP            reduce using rule 8 (stmt -> STORE NAME exp ; .)
    $end            reduce using rule 8 (stmt -> STORE NAME exp ; .)


state 54

    (9) stmt -> JUMPT exp label ; .

    NAME            reduce using rule 9 (stmt -> JUMPT exp label ; .)
    PRINT           reduce using rule 9 (stmt -> JUMPT exp label ; .)
    STORE           reduce using rule 9 (stmt -> JUMPT exp label ; .)
    JUMPT           reduce using rule 9 (stmt -> JUMPT exp label ; .)
    JUMPF           reduce using rule 9 (stmt -> JUMPT exp label ; .)
    JUMP            reduce using rule 9 (stmt -> JUMPT exp label ; .)
    STOP            reduce using rule 9 (stmt -> JUMPT exp label ; .)
    NOOP            reduce using rule 9 (stmt -> JUMPT exp label ; .)
    $end            reduce using rule 9 (stmt -> JUMPT exp label ; .)


state 55

    (10) stmt -> JUMPF exp label ; .

    NAME            reduce using rule 10 (stmt -> JUMPF exp label ; .)
    PRINT           reduce using rule 10 (stmt -> JUMPF exp label ; .)
    STORE           reduce using rule 10 (stmt -> JUMPF exp label ; .)
    JUMPT           reduce using rule 10 (stmt -> JUMPF exp label ; .)
    JUMPF           reduce using rule 10 (stmt -> JUMPF exp label ; .)
    JUMP            reduce using rule 10 (stmt -> JUMPF exp label ; .)
    STOP            reduce using rule 10 (stmt -> JUMPF exp label ; .)
    NOOP            reduce using rule 10 (stmt -> JUMPF exp label ; .)
    $end            reduce using rule 10 (stmt -> JUMPF exp label ; .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for + in state 36 resolved as shift
WARNING: shift/reduce conflict for - in state 36 resolved as shift
WARNING: shift/reduce conflict for * in state 36 resolved as shift
WARNING: shift/reduce conflict for / in state 36 resolved as shift
WARNING: shift/reduce conflict for EQ in state 36 resolved as shift
WARNING: shift/reduce conflict for LE in state 36 resolved as shift
WARNING: shift/reduce conflict for ( in state 36 resolved as shift
WARNING: shift/reduce conflict for NAME in state 36 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 36 resolved as shift
