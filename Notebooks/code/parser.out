Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> prog
Rule 1     prog -> instr_list
Rule 2     instr_list -> labeled_instr instr_list
Rule 3     instr_list -> empty
Rule 4     labeled_instr -> label_def instr
Rule 5     label_def -> NAME :
Rule 6     label_def -> empty
Rule 7     instr -> PRINT exp ;
Rule 8     instr -> STORE NAME exp ;
Rule 9     instr -> JUMPT exp label ;
Rule 10    instr -> JUMPF exp label ;
Rule 11    instr -> JUMP label ;
Rule 12    instr -> STOP ;
Rule 13    instr -> NOOP ;
Rule 14    exp -> + exp exp
Rule 15    exp -> - exp exp
Rule 16    exp -> - exp
Rule 17    exp -> * exp exp
Rule 18    exp -> / exp exp
Rule 19    exp -> EQ exp exp
Rule 20    exp -> LE exp exp
Rule 21    exp -> ( exp )
Rule 22    exp -> var
Rule 23    exp -> NUMBER
Rule 24    label -> NAME
Rule 25    var -> NAME
Rule 26    empty -> <empty>

Terminals, with rules where they appear

(                    : 21
)                    : 21
*                    : 17
+                    : 14
-                    : 15 16
/                    : 18
:                    : 5
;                    : 7 8 9 10 11 12 13
EQ                   : 19
JUMP                 : 11
JUMPF                : 10
JUMPT                : 9
LE                   : 20
NAME                 : 5 8 24 25
NOOP                 : 13
NUMBER               : 23
PRINT                : 7
STOP                 : 12
STORE                : 8
error                : 

Nonterminals, with rules where they appear

empty                : 3 6
exp                  : 7 8 9 10 14 14 15 15 16 17 17 18 18 19 19 20 20 21
instr                : 4
instr_list           : 1 2
label                : 9 10 11
label_def            : 4
labeled_instr        : 2
prog                 : 0
var                  : 22

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . instr_list
    (2) instr_list -> . labeled_instr instr_list
    (3) instr_list -> . empty
    (4) labeled_instr -> . label_def instr
    (26) empty -> .
    (5) label_def -> . NAME :
    (6) label_def -> . empty

    $end            reduce using rule 26 (empty -> .)
    PRINT           reduce using rule 26 (empty -> .)
    STORE           reduce using rule 26 (empty -> .)
    JUMPT           reduce using rule 26 (empty -> .)
    JUMPF           reduce using rule 26 (empty -> .)
    JUMP            reduce using rule 26 (empty -> .)
    STOP            reduce using rule 26 (empty -> .)
    NOOP            reduce using rule 26 (empty -> .)
    NAME            shift and go to state 6

    prog                           shift and go to state 1
    instr_list                     shift and go to state 2
    labeled_instr                  shift and go to state 3
    empty                          shift and go to state 4
    label_def                      shift and go to state 5

state 1

    (0) S' -> prog .



state 2

    (1) prog -> instr_list .

    $end            reduce using rule 1 (prog -> instr_list .)


state 3

    (2) instr_list -> labeled_instr . instr_list
    (2) instr_list -> . labeled_instr instr_list
    (3) instr_list -> . empty
    (4) labeled_instr -> . label_def instr
    (26) empty -> .
    (5) label_def -> . NAME :
    (6) label_def -> . empty

    $end            reduce using rule 26 (empty -> .)
    PRINT           reduce using rule 26 (empty -> .)
    STORE           reduce using rule 26 (empty -> .)
    JUMPT           reduce using rule 26 (empty -> .)
    JUMPF           reduce using rule 26 (empty -> .)
    JUMP            reduce using rule 26 (empty -> .)
    STOP            reduce using rule 26 (empty -> .)
    NOOP            reduce using rule 26 (empty -> .)
    NAME            shift and go to state 6

    labeled_instr                  shift and go to state 3
    instr_list                     shift and go to state 7
    empty                          shift and go to state 4
    label_def                      shift and go to state 5

state 4

    (3) instr_list -> empty .
    (6) label_def -> empty .

    $end            reduce using rule 3 (instr_list -> empty .)
    PRINT           reduce using rule 6 (label_def -> empty .)
    STORE           reduce using rule 6 (label_def -> empty .)
    JUMPT           reduce using rule 6 (label_def -> empty .)
    JUMPF           reduce using rule 6 (label_def -> empty .)
    JUMP            reduce using rule 6 (label_def -> empty .)
    STOP            reduce using rule 6 (label_def -> empty .)
    NOOP            reduce using rule 6 (label_def -> empty .)


state 5

    (4) labeled_instr -> label_def . instr
    (7) instr -> . PRINT exp ;
    (8) instr -> . STORE NAME exp ;
    (9) instr -> . JUMPT exp label ;
    (10) instr -> . JUMPF exp label ;
    (11) instr -> . JUMP label ;
    (12) instr -> . STOP ;
    (13) instr -> . NOOP ;

    PRINT           shift and go to state 9
    STORE           shift and go to state 10
    JUMPT           shift and go to state 11
    JUMPF           shift and go to state 12
    JUMP            shift and go to state 13
    STOP            shift and go to state 14
    NOOP            shift and go to state 15

    instr                          shift and go to state 8

state 6

    (5) label_def -> NAME . :

    :               shift and go to state 16


state 7

    (2) instr_list -> labeled_instr instr_list .

    $end            reduce using rule 2 (instr_list -> labeled_instr instr_list .)


state 8

    (4) labeled_instr -> label_def instr .

    NAME            reduce using rule 4 (labeled_instr -> label_def instr .)
    PRINT           reduce using rule 4 (labeled_instr -> label_def instr .)
    STORE           reduce using rule 4 (labeled_instr -> label_def instr .)
    JUMPT           reduce using rule 4 (labeled_instr -> label_def instr .)
    JUMPF           reduce using rule 4 (labeled_instr -> label_def instr .)
    JUMP            reduce using rule 4 (labeled_instr -> label_def instr .)
    STOP            reduce using rule 4 (labeled_instr -> label_def instr .)
    NOOP            reduce using rule 4 (labeled_instr -> label_def instr .)
    $end            reduce using rule 4 (labeled_instr -> label_def instr .)


state 9

    (7) instr -> PRINT . exp ;
    (14) exp -> . + exp exp
    (15) exp -> . - exp exp
    (16) exp -> . - exp
    (17) exp -> . * exp exp
    (18) exp -> . / exp exp
    (19) exp -> . EQ exp exp
    (20) exp -> . LE exp exp
    (21) exp -> . ( exp )
    (22) exp -> . var
    (23) exp -> . NUMBER
    (25) var -> . NAME

    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21
    EQ              shift and go to state 22
    LE              shift and go to state 23
    (               shift and go to state 24
    NUMBER          shift and go to state 26
    NAME            shift and go to state 27

    exp                            shift and go to state 17
    var                            shift and go to state 25

state 10

    (8) instr -> STORE . NAME exp ;

    NAME            shift and go to state 28


state 11

    (9) instr -> JUMPT . exp label ;
    (14) exp -> . + exp exp
    (15) exp -> . - exp exp
    (16) exp -> . - exp
    (17) exp -> . * exp exp
    (18) exp -> . / exp exp
    (19) exp -> . EQ exp exp
    (20) exp -> . LE exp exp
    (21) exp -> . ( exp )
    (22) exp -> . var
    (23) exp -> . NUMBER
    (25) var -> . NAME

    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21
    EQ              shift and go to state 22
    LE              shift and go to state 23
    (               shift and go to state 24
    NUMBER          shift and go to state 26
    NAME            shift and go to state 27

    exp                            shift and go to state 29
    var                            shift and go to state 25

state 12

    (10) instr -> JUMPF . exp label ;
    (14) exp -> . + exp exp
    (15) exp -> . - exp exp
    (16) exp -> . - exp
    (17) exp -> . * exp exp
    (18) exp -> . / exp exp
    (19) exp -> . EQ exp exp
    (20) exp -> . LE exp exp
    (21) exp -> . ( exp )
    (22) exp -> . var
    (23) exp -> . NUMBER
    (25) var -> . NAME

    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21
    EQ              shift and go to state 22
    LE              shift and go to state 23
    (               shift and go to state 24
    NUMBER          shift and go to state 26
    NAME            shift and go to state 27

    exp                            shift and go to state 30
    var                            shift and go to state 25

state 13

    (11) instr -> JUMP . label ;
    (24) label -> . NAME

    NAME            shift and go to state 32

    label                          shift and go to state 31

state 14

    (12) instr -> STOP . ;

    ;               shift and go to state 33


state 15

    (13) instr -> NOOP . ;

    ;               shift and go to state 34


state 16

    (5) label_def -> NAME : .

    PRINT           reduce using rule 5 (label_def -> NAME : .)
    STORE           reduce using rule 5 (label_def -> NAME : .)
    JUMPT           reduce using rule 5 (label_def -> NAME : .)
    JUMPF           reduce using rule 5 (label_def -> NAME : .)
    JUMP            reduce using rule 5 (label_def -> NAME : .)
    STOP            reduce using rule 5 (label_def -> NAME : .)
    NOOP            reduce using rule 5 (label_def -> NAME : .)


state 17

    (7) instr -> PRINT exp . ;

    ;               shift and go to state 35


state 18

    (14) exp -> + . exp exp
    (14) exp -> . + exp exp
    (15) exp -> . - exp exp
    (16) exp -> . - exp
    (17) exp -> . * exp exp
    (18) exp -> . / exp exp
    (19) exp -> . EQ exp exp
    (20) exp -> . LE exp exp
    (21) exp -> . ( exp )
    (22) exp -> . var
    (23) exp -> . NUMBER
    (25) var -> . NAME

    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21
    EQ              shift and go to state 22
    LE              shift and go to state 23
    (               shift and go to state 24
    NUMBER          shift and go to state 26
    NAME            shift and go to state 27

    exp                            shift and go to state 36
    var                            shift and go to state 25

state 19

    (15) exp -> - . exp exp
    (16) exp -> - . exp
    (14) exp -> . + exp exp
    (15) exp -> . - exp exp
    (16) exp -> . - exp
    (17) exp -> . * exp exp
    (18) exp -> . / exp exp
    (19) exp -> . EQ exp exp
    (20) exp -> . LE exp exp
    (21) exp -> . ( exp )
    (22) exp -> . var
    (23) exp -> . NUMBER
    (25) var -> . NAME

    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21
    EQ              shift and go to state 22
    LE              shift and go to state 23
    (               shift and go to state 24
    NUMBER          shift and go to state 26
    NAME            shift and go to state 27

    exp                            shift and go to state 37
    var                            shift and go to state 25

state 20

    (17) exp -> * . exp exp
    (14) exp -> . + exp exp
    (15) exp -> . - exp exp
    (16) exp -> . - exp
    (17) exp -> . * exp exp
    (18) exp -> . / exp exp
    (19) exp -> . EQ exp exp
    (20) exp -> . LE exp exp
    (21) exp -> . ( exp )
    (22) exp -> . var
    (23) exp -> . NUMBER
    (25) var -> . NAME

    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21
    EQ              shift and go to state 22
    LE              shift and go to state 23
    (               shift and go to state 24
    NUMBER          shift and go to state 26
    NAME            shift and go to state 27

    exp                            shift and go to state 38
    var                            shift and go to state 25

state 21

    (18) exp -> / . exp exp
    (14) exp -> . + exp exp
    (15) exp -> . - exp exp
    (16) exp -> . - exp
    (17) exp -> . * exp exp
    (18) exp -> . / exp exp
    (19) exp -> . EQ exp exp
    (20) exp -> . LE exp exp
    (21) exp -> . ( exp )
    (22) exp -> . var
    (23) exp -> . NUMBER
    (25) var -> . NAME

    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21
    EQ              shift and go to state 22
    LE              shift and go to state 23
    (               shift and go to state 24
    NUMBER          shift and go to state 26
    NAME            shift and go to state 27

    exp                            shift and go to state 39
    var                            shift and go to state 25

state 22

    (19) exp -> EQ . exp exp
    (14) exp -> . + exp exp
    (15) exp -> . - exp exp
    (16) exp -> . - exp
    (17) exp -> . * exp exp
    (18) exp -> . / exp exp
    (19) exp -> . EQ exp exp
    (20) exp -> . LE exp exp
    (21) exp -> . ( exp )
    (22) exp -> . var
    (23) exp -> . NUMBER
    (25) var -> . NAME

    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21
    EQ              shift and go to state 22
    LE              shift and go to state 23
    (               shift and go to state 24
    NUMBER          shift and go to state 26
    NAME            shift and go to state 27

    exp                            shift and go to state 40
    var                            shift and go to state 25

state 23

    (20) exp -> LE . exp exp
    (14) exp -> . + exp exp
    (15) exp -> . - exp exp
    (16) exp -> . - exp
    (17) exp -> . * exp exp
    (18) exp -> . / exp exp
    (19) exp -> . EQ exp exp
    (20) exp -> . LE exp exp
    (21) exp -> . ( exp )
    (22) exp -> . var
    (23) exp -> . NUMBER
    (25) var -> . NAME

    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21
    EQ              shift and go to state 22
    LE              shift and go to state 23
    (               shift and go to state 24
    NUMBER          shift and go to state 26
    NAME            shift and go to state 27

    exp                            shift and go to state 41
    var                            shift and go to state 25

state 24

    (21) exp -> ( . exp )
    (14) exp -> . + exp exp
    (15) exp -> . - exp exp
    (16) exp -> . - exp
    (17) exp -> . * exp exp
    (18) exp -> . / exp exp
    (19) exp -> . EQ exp exp
    (20) exp -> . LE exp exp
    (21) exp -> . ( exp )
    (22) exp -> . var
    (23) exp -> . NUMBER
    (25) var -> . NAME

    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21
    EQ              shift and go to state 22
    LE              shift and go to state 23
    (               shift and go to state 24
    NUMBER          shift and go to state 26
    NAME            shift and go to state 27

    exp                            shift and go to state 42
    var                            shift and go to state 25

state 25

    (22) exp -> var .

    ;               reduce using rule 22 (exp -> var .)
    NAME            reduce using rule 22 (exp -> var .)
    +               reduce using rule 22 (exp -> var .)
    -               reduce using rule 22 (exp -> var .)
    *               reduce using rule 22 (exp -> var .)
    /               reduce using rule 22 (exp -> var .)
    EQ              reduce using rule 22 (exp -> var .)
    LE              reduce using rule 22 (exp -> var .)
    (               reduce using rule 22 (exp -> var .)
    NUMBER          reduce using rule 22 (exp -> var .)
    )               reduce using rule 22 (exp -> var .)


state 26

    (23) exp -> NUMBER .

    ;               reduce using rule 23 (exp -> NUMBER .)
    NAME            reduce using rule 23 (exp -> NUMBER .)
    +               reduce using rule 23 (exp -> NUMBER .)
    -               reduce using rule 23 (exp -> NUMBER .)
    *               reduce using rule 23 (exp -> NUMBER .)
    /               reduce using rule 23 (exp -> NUMBER .)
    EQ              reduce using rule 23 (exp -> NUMBER .)
    LE              reduce using rule 23 (exp -> NUMBER .)
    (               reduce using rule 23 (exp -> NUMBER .)
    NUMBER          reduce using rule 23 (exp -> NUMBER .)
    )               reduce using rule 23 (exp -> NUMBER .)


state 27

    (25) var -> NAME .

    ;               reduce using rule 25 (var -> NAME .)
    NAME            reduce using rule 25 (var -> NAME .)
    +               reduce using rule 25 (var -> NAME .)
    -               reduce using rule 25 (var -> NAME .)
    *               reduce using rule 25 (var -> NAME .)
    /               reduce using rule 25 (var -> NAME .)
    EQ              reduce using rule 25 (var -> NAME .)
    LE              reduce using rule 25 (var -> NAME .)
    (               reduce using rule 25 (var -> NAME .)
    NUMBER          reduce using rule 25 (var -> NAME .)
    )               reduce using rule 25 (var -> NAME .)


state 28

    (8) instr -> STORE NAME . exp ;
    (14) exp -> . + exp exp
    (15) exp -> . - exp exp
    (16) exp -> . - exp
    (17) exp -> . * exp exp
    (18) exp -> . / exp exp
    (19) exp -> . EQ exp exp
    (20) exp -> . LE exp exp
    (21) exp -> . ( exp )
    (22) exp -> . var
    (23) exp -> . NUMBER
    (25) var -> . NAME

    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21
    EQ              shift and go to state 22
    LE              shift and go to state 23
    (               shift and go to state 24
    NUMBER          shift and go to state 26
    NAME            shift and go to state 27

    exp                            shift and go to state 43
    var                            shift and go to state 25

state 29

    (9) instr -> JUMPT exp . label ;
    (24) label -> . NAME

    NAME            shift and go to state 32

    label                          shift and go to state 44

state 30

    (10) instr -> JUMPF exp . label ;
    (24) label -> . NAME

    NAME            shift and go to state 32

    label                          shift and go to state 45

state 31

    (11) instr -> JUMP label . ;

    ;               shift and go to state 46


state 32

    (24) label -> NAME .

    ;               reduce using rule 24 (label -> NAME .)


state 33

    (12) instr -> STOP ; .

    NAME            reduce using rule 12 (instr -> STOP ; .)
    PRINT           reduce using rule 12 (instr -> STOP ; .)
    STORE           reduce using rule 12 (instr -> STOP ; .)
    JUMPT           reduce using rule 12 (instr -> STOP ; .)
    JUMPF           reduce using rule 12 (instr -> STOP ; .)
    JUMP            reduce using rule 12 (instr -> STOP ; .)
    STOP            reduce using rule 12 (instr -> STOP ; .)
    NOOP            reduce using rule 12 (instr -> STOP ; .)
    $end            reduce using rule 12 (instr -> STOP ; .)


state 34

    (13) instr -> NOOP ; .

    NAME            reduce using rule 13 (instr -> NOOP ; .)
    PRINT           reduce using rule 13 (instr -> NOOP ; .)
    STORE           reduce using rule 13 (instr -> NOOP ; .)
    JUMPT           reduce using rule 13 (instr -> NOOP ; .)
    JUMPF           reduce using rule 13 (instr -> NOOP ; .)
    JUMP            reduce using rule 13 (instr -> NOOP ; .)
    STOP            reduce using rule 13 (instr -> NOOP ; .)
    NOOP            reduce using rule 13 (instr -> NOOP ; .)
    $end            reduce using rule 13 (instr -> NOOP ; .)


state 35

    (7) instr -> PRINT exp ; .

    NAME            reduce using rule 7 (instr -> PRINT exp ; .)
    PRINT           reduce using rule 7 (instr -> PRINT exp ; .)
    STORE           reduce using rule 7 (instr -> PRINT exp ; .)
    JUMPT           reduce using rule 7 (instr -> PRINT exp ; .)
    JUMPF           reduce using rule 7 (instr -> PRINT exp ; .)
    JUMP            reduce using rule 7 (instr -> PRINT exp ; .)
    STOP            reduce using rule 7 (instr -> PRINT exp ; .)
    NOOP            reduce using rule 7 (instr -> PRINT exp ; .)
    $end            reduce using rule 7 (instr -> PRINT exp ; .)


state 36

    (14) exp -> + exp . exp
    (14) exp -> . + exp exp
    (15) exp -> . - exp exp
    (16) exp -> . - exp
    (17) exp -> . * exp exp
    (18) exp -> . / exp exp
    (19) exp -> . EQ exp exp
    (20) exp -> . LE exp exp
    (21) exp -> . ( exp )
    (22) exp -> . var
    (23) exp -> . NUMBER
    (25) var -> . NAME

    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21
    EQ              shift and go to state 22
    LE              shift and go to state 23
    (               shift and go to state 24
    NUMBER          shift and go to state 26
    NAME            shift and go to state 27

    exp                            shift and go to state 47
    var                            shift and go to state 25

state 37

    (15) exp -> - exp . exp
    (16) exp -> - exp .
    (14) exp -> . + exp exp
    (15) exp -> . - exp exp
    (16) exp -> . - exp
    (17) exp -> . * exp exp
    (18) exp -> . / exp exp
    (19) exp -> . EQ exp exp
    (20) exp -> . LE exp exp
    (21) exp -> . ( exp )
    (22) exp -> . var
    (23) exp -> . NUMBER
    (25) var -> . NAME

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
    ;               reduce using rule 16 (exp -> - exp .)
    )               reduce using rule 16 (exp -> - exp .)
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21
    EQ              shift and go to state 22
    LE              shift and go to state 23
    (               shift and go to state 24
    NUMBER          shift and go to state 26
    NAME            shift and go to state 27

  ! NAME            [ reduce using rule 16 (exp -> - exp .) ]
  ! +               [ reduce using rule 16 (exp -> - exp .) ]
  ! -               [ reduce using rule 16 (exp -> - exp .) ]
  ! *               [ reduce using rule 16 (exp -> - exp .) ]
  ! /               [ reduce using rule 16 (exp -> - exp .) ]
  ! EQ              [ reduce using rule 16 (exp -> - exp .) ]
  ! LE              [ reduce using rule 16 (exp -> - exp .) ]
  ! (               [ reduce using rule 16 (exp -> - exp .) ]
  ! NUMBER          [ reduce using rule 16 (exp -> - exp .) ]

    exp                            shift and go to state 48
    var                            shift and go to state 25

state 38

    (17) exp -> * exp . exp
    (14) exp -> . + exp exp
    (15) exp -> . - exp exp
    (16) exp -> . - exp
    (17) exp -> . * exp exp
    (18) exp -> . / exp exp
    (19) exp -> . EQ exp exp
    (20) exp -> . LE exp exp
    (21) exp -> . ( exp )
    (22) exp -> . var
    (23) exp -> . NUMBER
    (25) var -> . NAME

    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21
    EQ              shift and go to state 22
    LE              shift and go to state 23
    (               shift and go to state 24
    NUMBER          shift and go to state 26
    NAME            shift and go to state 27

    exp                            shift and go to state 49
    var                            shift and go to state 25

state 39

    (18) exp -> / exp . exp
    (14) exp -> . + exp exp
    (15) exp -> . - exp exp
    (16) exp -> . - exp
    (17) exp -> . * exp exp
    (18) exp -> . / exp exp
    (19) exp -> . EQ exp exp
    (20) exp -> . LE exp exp
    (21) exp -> . ( exp )
    (22) exp -> . var
    (23) exp -> . NUMBER
    (25) var -> . NAME

    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21
    EQ              shift and go to state 22
    LE              shift and go to state 23
    (               shift and go to state 24
    NUMBER          shift and go to state 26
    NAME            shift and go to state 27

    exp                            shift and go to state 50
    var                            shift and go to state 25

state 40

    (19) exp -> EQ exp . exp
    (14) exp -> . + exp exp
    (15) exp -> . - exp exp
    (16) exp -> . - exp
    (17) exp -> . * exp exp
    (18) exp -> . / exp exp
    (19) exp -> . EQ exp exp
    (20) exp -> . LE exp exp
    (21) exp -> . ( exp )
    (22) exp -> . var
    (23) exp -> . NUMBER
    (25) var -> . NAME

    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21
    EQ              shift and go to state 22
    LE              shift and go to state 23
    (               shift and go to state 24
    NUMBER          shift and go to state 26
    NAME            shift and go to state 27

    exp                            shift and go to state 51
    var                            shift and go to state 25

state 41

    (20) exp -> LE exp . exp
    (14) exp -> . + exp exp
    (15) exp -> . - exp exp
    (16) exp -> . - exp
    (17) exp -> . * exp exp
    (18) exp -> . / exp exp
    (19) exp -> . EQ exp exp
    (20) exp -> . LE exp exp
    (21) exp -> . ( exp )
    (22) exp -> . var
    (23) exp -> . NUMBER
    (25) var -> . NAME

    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21
    EQ              shift and go to state 22
    LE              shift and go to state 23
    (               shift and go to state 24
    NUMBER          shift and go to state 26
    NAME            shift and go to state 27

    exp                            shift and go to state 52
    var                            shift and go to state 25

state 42

    (21) exp -> ( exp . )

    )               shift and go to state 53


state 43

    (8) instr -> STORE NAME exp . ;

    ;               shift and go to state 54


state 44

    (9) instr -> JUMPT exp label . ;

    ;               shift and go to state 55


state 45

    (10) instr -> JUMPF exp label . ;

    ;               shift and go to state 56


state 46

    (11) instr -> JUMP label ; .

    NAME            reduce using rule 11 (instr -> JUMP label ; .)
    PRINT           reduce using rule 11 (instr -> JUMP label ; .)
    STORE           reduce using rule 11 (instr -> JUMP label ; .)
    JUMPT           reduce using rule 11 (instr -> JUMP label ; .)
    JUMPF           reduce using rule 11 (instr -> JUMP label ; .)
    JUMP            reduce using rule 11 (instr -> JUMP label ; .)
    STOP            reduce using rule 11 (instr -> JUMP label ; .)
    NOOP            reduce using rule 11 (instr -> JUMP label ; .)
    $end            reduce using rule 11 (instr -> JUMP label ; .)


state 47

    (14) exp -> + exp exp .

    ;               reduce using rule 14 (exp -> + exp exp .)
    NAME            reduce using rule 14 (exp -> + exp exp .)
    +               reduce using rule 14 (exp -> + exp exp .)
    -               reduce using rule 14 (exp -> + exp exp .)
    *               reduce using rule 14 (exp -> + exp exp .)
    /               reduce using rule 14 (exp -> + exp exp .)
    EQ              reduce using rule 14 (exp -> + exp exp .)
    LE              reduce using rule 14 (exp -> + exp exp .)
    (               reduce using rule 14 (exp -> + exp exp .)
    NUMBER          reduce using rule 14 (exp -> + exp exp .)
    )               reduce using rule 14 (exp -> + exp exp .)


state 48

    (15) exp -> - exp exp .

    ;               reduce using rule 15 (exp -> - exp exp .)
    NAME            reduce using rule 15 (exp -> - exp exp .)
    +               reduce using rule 15 (exp -> - exp exp .)
    -               reduce using rule 15 (exp -> - exp exp .)
    *               reduce using rule 15 (exp -> - exp exp .)
    /               reduce using rule 15 (exp -> - exp exp .)
    EQ              reduce using rule 15 (exp -> - exp exp .)
    LE              reduce using rule 15 (exp -> - exp exp .)
    (               reduce using rule 15 (exp -> - exp exp .)
    NUMBER          reduce using rule 15 (exp -> - exp exp .)
    )               reduce using rule 15 (exp -> - exp exp .)


state 49

    (17) exp -> * exp exp .

    ;               reduce using rule 17 (exp -> * exp exp .)
    NAME            reduce using rule 17 (exp -> * exp exp .)
    +               reduce using rule 17 (exp -> * exp exp .)
    -               reduce using rule 17 (exp -> * exp exp .)
    *               reduce using rule 17 (exp -> * exp exp .)
    /               reduce using rule 17 (exp -> * exp exp .)
    EQ              reduce using rule 17 (exp -> * exp exp .)
    LE              reduce using rule 17 (exp -> * exp exp .)
    (               reduce using rule 17 (exp -> * exp exp .)
    NUMBER          reduce using rule 17 (exp -> * exp exp .)
    )               reduce using rule 17 (exp -> * exp exp .)


state 50

    (18) exp -> / exp exp .

    ;               reduce using rule 18 (exp -> / exp exp .)
    NAME            reduce using rule 18 (exp -> / exp exp .)
    +               reduce using rule 18 (exp -> / exp exp .)
    -               reduce using rule 18 (exp -> / exp exp .)
    *               reduce using rule 18 (exp -> / exp exp .)
    /               reduce using rule 18 (exp -> / exp exp .)
    EQ              reduce using rule 18 (exp -> / exp exp .)
    LE              reduce using rule 18 (exp -> / exp exp .)
    (               reduce using rule 18 (exp -> / exp exp .)
    NUMBER          reduce using rule 18 (exp -> / exp exp .)
    )               reduce using rule 18 (exp -> / exp exp .)


state 51

    (19) exp -> EQ exp exp .

    ;               reduce using rule 19 (exp -> EQ exp exp .)
    NAME            reduce using rule 19 (exp -> EQ exp exp .)
    +               reduce using rule 19 (exp -> EQ exp exp .)
    -               reduce using rule 19 (exp -> EQ exp exp .)
    *               reduce using rule 19 (exp -> EQ exp exp .)
    /               reduce using rule 19 (exp -> EQ exp exp .)
    EQ              reduce using rule 19 (exp -> EQ exp exp .)
    LE              reduce using rule 19 (exp -> EQ exp exp .)
    (               reduce using rule 19 (exp -> EQ exp exp .)
    NUMBER          reduce using rule 19 (exp -> EQ exp exp .)
    )               reduce using rule 19 (exp -> EQ exp exp .)


state 52

    (20) exp -> LE exp exp .

    ;               reduce using rule 20 (exp -> LE exp exp .)
    NAME            reduce using rule 20 (exp -> LE exp exp .)
    +               reduce using rule 20 (exp -> LE exp exp .)
    -               reduce using rule 20 (exp -> LE exp exp .)
    *               reduce using rule 20 (exp -> LE exp exp .)
    /               reduce using rule 20 (exp -> LE exp exp .)
    EQ              reduce using rule 20 (exp -> LE exp exp .)
    LE              reduce using rule 20 (exp -> LE exp exp .)
    (               reduce using rule 20 (exp -> LE exp exp .)
    NUMBER          reduce using rule 20 (exp -> LE exp exp .)
    )               reduce using rule 20 (exp -> LE exp exp .)


state 53

    (21) exp -> ( exp ) .

    ;               reduce using rule 21 (exp -> ( exp ) .)
    NAME            reduce using rule 21 (exp -> ( exp ) .)
    +               reduce using rule 21 (exp -> ( exp ) .)
    -               reduce using rule 21 (exp -> ( exp ) .)
    *               reduce using rule 21 (exp -> ( exp ) .)
    /               reduce using rule 21 (exp -> ( exp ) .)
    EQ              reduce using rule 21 (exp -> ( exp ) .)
    LE              reduce using rule 21 (exp -> ( exp ) .)
    (               reduce using rule 21 (exp -> ( exp ) .)
    NUMBER          reduce using rule 21 (exp -> ( exp ) .)
    )               reduce using rule 21 (exp -> ( exp ) .)


state 54

    (8) instr -> STORE NAME exp ; .

    NAME            reduce using rule 8 (instr -> STORE NAME exp ; .)
    PRINT           reduce using rule 8 (instr -> STORE NAME exp ; .)
    STORE           reduce using rule 8 (instr -> STORE NAME exp ; .)
    JUMPT           reduce using rule 8 (instr -> STORE NAME exp ; .)
    JUMPF           reduce using rule 8 (instr -> STORE NAME exp ; .)
    JUMP            reduce using rule 8 (instr -> STORE NAME exp ; .)
    STOP            reduce using rule 8 (instr -> STORE NAME exp ; .)
    NOOP            reduce using rule 8 (instr -> STORE NAME exp ; .)
    $end            reduce using rule 8 (instr -> STORE NAME exp ; .)


state 55

    (9) instr -> JUMPT exp label ; .

    NAME            reduce using rule 9 (instr -> JUMPT exp label ; .)
    PRINT           reduce using rule 9 (instr -> JUMPT exp label ; .)
    STORE           reduce using rule 9 (instr -> JUMPT exp label ; .)
    JUMPT           reduce using rule 9 (instr -> JUMPT exp label ; .)
    JUMPF           reduce using rule 9 (instr -> JUMPT exp label ; .)
    JUMP            reduce using rule 9 (instr -> JUMPT exp label ; .)
    STOP            reduce using rule 9 (instr -> JUMPT exp label ; .)
    NOOP            reduce using rule 9 (instr -> JUMPT exp label ; .)
    $end            reduce using rule 9 (instr -> JUMPT exp label ; .)


state 56

    (10) instr -> JUMPF exp label ; .

    NAME            reduce using rule 10 (instr -> JUMPF exp label ; .)
    PRINT           reduce using rule 10 (instr -> JUMPF exp label ; .)
    STORE           reduce using rule 10 (instr -> JUMPF exp label ; .)
    JUMPT           reduce using rule 10 (instr -> JUMPF exp label ; .)
    JUMPF           reduce using rule 10 (instr -> JUMPF exp label ; .)
    JUMP            reduce using rule 10 (instr -> JUMPF exp label ; .)
    STOP            reduce using rule 10 (instr -> JUMPF exp label ; .)
    NOOP            reduce using rule 10 (instr -> JUMPF exp label ; .)
    $end            reduce using rule 10 (instr -> JUMPF exp label ; .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for + in state 37 resolved as shift
WARNING: shift/reduce conflict for - in state 37 resolved as shift
WARNING: shift/reduce conflict for * in state 37 resolved as shift
WARNING: shift/reduce conflict for / in state 37 resolved as shift
WARNING: shift/reduce conflict for EQ in state 37 resolved as shift
WARNING: shift/reduce conflict for LE in state 37 resolved as shift
WARNING: shift/reduce conflict for ( in state 37 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 37 resolved as shift
WARNING: shift/reduce conflict for NAME in state 37 resolved as shift
