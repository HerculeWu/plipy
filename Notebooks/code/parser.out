Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Unused terminals:

    NEWLINE

Grammar

Rule 0     S' -> prog
Rule 1     prog -> stmt_list
Rule 2     stmt_list -> stmt stmt_list
Rule 3     stmt_list -> empty
Rule 4     stmt -> PRINT exp ;
Rule 5     stmt -> STORE NAME exp ;
Rule 6     exp -> + exp exp
Rule 7     exp -> - exp exp
Rule 8     exp -> ( exp )
Rule 9     exp -> var
Rule 10    exp -> num
Rule 11    var -> NAME
Rule 12    num -> NUMBER
Rule 13    empty -> <empty>

Terminals, with rules where they appear

(                    : 8
)                    : 8
+                    : 6
-                    : 7
;                    : 4 5
NAME                 : 5 11
NEWLINE              : 
NUMBER               : 12
PRINT                : 4
STORE                : 5
error                : 

Nonterminals, with rules where they appear

empty                : 3
exp                  : 4 5 6 6 7 7 8
num                  : 10
prog                 : 0
stmt                 : 2
stmt_list            : 1 2
var                  : 9

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . stmt_list
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . empty
    (4) stmt -> . PRINT exp ;
    (5) stmt -> . STORE NAME exp ;
    (13) empty -> .

    PRINT           shift and go to state 5
    STORE           shift and go to state 6
    $end            reduce using rule 13 (empty -> .)

    prog                           shift and go to state 1
    stmt_list                      shift and go to state 2
    stmt                           shift and go to state 3
    empty                          shift and go to state 4

state 1

    (0) S' -> prog .



state 2

    (1) prog -> stmt_list .

    $end            reduce using rule 1 (prog -> stmt_list .)


state 3

    (2) stmt_list -> stmt . stmt_list
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . empty
    (4) stmt -> . PRINT exp ;
    (5) stmt -> . STORE NAME exp ;
    (13) empty -> .

    PRINT           shift and go to state 5
    STORE           shift and go to state 6
    $end            reduce using rule 13 (empty -> .)

    stmt                           shift and go to state 3
    stmt_list                      shift and go to state 7
    empty                          shift and go to state 4

state 4

    (3) stmt_list -> empty .

    $end            reduce using rule 3 (stmt_list -> empty .)


state 5

    (4) stmt -> PRINT . exp ;
    (6) exp -> . + exp exp
    (7) exp -> . - exp exp
    (8) exp -> . ( exp )
    (9) exp -> . var
    (10) exp -> . num
    (11) var -> . NAME
    (12) num -> . NUMBER

    +               shift and go to state 9
    -               shift and go to state 10
    (               shift and go to state 11
    NAME            shift and go to state 14
    NUMBER          shift and go to state 15

    exp                            shift and go to state 8
    var                            shift and go to state 12
    num                            shift and go to state 13

state 6

    (5) stmt -> STORE . NAME exp ;

    NAME            shift and go to state 16


state 7

    (2) stmt_list -> stmt stmt_list .

    $end            reduce using rule 2 (stmt_list -> stmt stmt_list .)


state 8

    (4) stmt -> PRINT exp . ;

    ;               shift and go to state 17


state 9

    (6) exp -> + . exp exp
    (6) exp -> . + exp exp
    (7) exp -> . - exp exp
    (8) exp -> . ( exp )
    (9) exp -> . var
    (10) exp -> . num
    (11) var -> . NAME
    (12) num -> . NUMBER

    +               shift and go to state 9
    -               shift and go to state 10
    (               shift and go to state 11
    NAME            shift and go to state 14
    NUMBER          shift and go to state 15

    exp                            shift and go to state 18
    var                            shift and go to state 12
    num                            shift and go to state 13

state 10

    (7) exp -> - . exp exp
    (6) exp -> . + exp exp
    (7) exp -> . - exp exp
    (8) exp -> . ( exp )
    (9) exp -> . var
    (10) exp -> . num
    (11) var -> . NAME
    (12) num -> . NUMBER

    +               shift and go to state 9
    -               shift and go to state 10
    (               shift and go to state 11
    NAME            shift and go to state 14
    NUMBER          shift and go to state 15

    exp                            shift and go to state 19
    var                            shift and go to state 12
    num                            shift and go to state 13

state 11

    (8) exp -> ( . exp )
    (6) exp -> . + exp exp
    (7) exp -> . - exp exp
    (8) exp -> . ( exp )
    (9) exp -> . var
    (10) exp -> . num
    (11) var -> . NAME
    (12) num -> . NUMBER

    +               shift and go to state 9
    -               shift and go to state 10
    (               shift and go to state 11
    NAME            shift and go to state 14
    NUMBER          shift and go to state 15

    exp                            shift and go to state 20
    var                            shift and go to state 12
    num                            shift and go to state 13

state 12

    (9) exp -> var .

    ;               reduce using rule 9 (exp -> var .)
    +               reduce using rule 9 (exp -> var .)
    -               reduce using rule 9 (exp -> var .)
    (               reduce using rule 9 (exp -> var .)
    NAME            reduce using rule 9 (exp -> var .)
    NUMBER          reduce using rule 9 (exp -> var .)
    )               reduce using rule 9 (exp -> var .)


state 13

    (10) exp -> num .

    ;               reduce using rule 10 (exp -> num .)
    +               reduce using rule 10 (exp -> num .)
    -               reduce using rule 10 (exp -> num .)
    (               reduce using rule 10 (exp -> num .)
    NAME            reduce using rule 10 (exp -> num .)
    NUMBER          reduce using rule 10 (exp -> num .)
    )               reduce using rule 10 (exp -> num .)


state 14

    (11) var -> NAME .

    ;               reduce using rule 11 (var -> NAME .)
    +               reduce using rule 11 (var -> NAME .)
    -               reduce using rule 11 (var -> NAME .)
    (               reduce using rule 11 (var -> NAME .)
    NAME            reduce using rule 11 (var -> NAME .)
    NUMBER          reduce using rule 11 (var -> NAME .)
    )               reduce using rule 11 (var -> NAME .)


state 15

    (12) num -> NUMBER .

    ;               reduce using rule 12 (num -> NUMBER .)
    +               reduce using rule 12 (num -> NUMBER .)
    -               reduce using rule 12 (num -> NUMBER .)
    (               reduce using rule 12 (num -> NUMBER .)
    NAME            reduce using rule 12 (num -> NUMBER .)
    NUMBER          reduce using rule 12 (num -> NUMBER .)
    )               reduce using rule 12 (num -> NUMBER .)


state 16

    (5) stmt -> STORE NAME . exp ;
    (6) exp -> . + exp exp
    (7) exp -> . - exp exp
    (8) exp -> . ( exp )
    (9) exp -> . var
    (10) exp -> . num
    (11) var -> . NAME
    (12) num -> . NUMBER

    +               shift and go to state 9
    -               shift and go to state 10
    (               shift and go to state 11
    NAME            shift and go to state 14
    NUMBER          shift and go to state 15

    exp                            shift and go to state 21
    var                            shift and go to state 12
    num                            shift and go to state 13

state 17

    (4) stmt -> PRINT exp ; .

    PRINT           reduce using rule 4 (stmt -> PRINT exp ; .)
    STORE           reduce using rule 4 (stmt -> PRINT exp ; .)
    $end            reduce using rule 4 (stmt -> PRINT exp ; .)


state 18

    (6) exp -> + exp . exp
    (6) exp -> . + exp exp
    (7) exp -> . - exp exp
    (8) exp -> . ( exp )
    (9) exp -> . var
    (10) exp -> . num
    (11) var -> . NAME
    (12) num -> . NUMBER

    +               shift and go to state 9
    -               shift and go to state 10
    (               shift and go to state 11
    NAME            shift and go to state 14
    NUMBER          shift and go to state 15

    exp                            shift and go to state 22
    var                            shift and go to state 12
    num                            shift and go to state 13

state 19

    (7) exp -> - exp . exp
    (6) exp -> . + exp exp
    (7) exp -> . - exp exp
    (8) exp -> . ( exp )
    (9) exp -> . var
    (10) exp -> . num
    (11) var -> . NAME
    (12) num -> . NUMBER

    +               shift and go to state 9
    -               shift and go to state 10
    (               shift and go to state 11
    NAME            shift and go to state 14
    NUMBER          shift and go to state 15

    exp                            shift and go to state 23
    var                            shift and go to state 12
    num                            shift and go to state 13

state 20

    (8) exp -> ( exp . )

    )               shift and go to state 24


state 21

    (5) stmt -> STORE NAME exp . ;

    ;               shift and go to state 25


state 22

    (6) exp -> + exp exp .

    ;               reduce using rule 6 (exp -> + exp exp .)
    +               reduce using rule 6 (exp -> + exp exp .)
    -               reduce using rule 6 (exp -> + exp exp .)
    (               reduce using rule 6 (exp -> + exp exp .)
    NAME            reduce using rule 6 (exp -> + exp exp .)
    NUMBER          reduce using rule 6 (exp -> + exp exp .)
    )               reduce using rule 6 (exp -> + exp exp .)


state 23

    (7) exp -> - exp exp .

    ;               reduce using rule 7 (exp -> - exp exp .)
    +               reduce using rule 7 (exp -> - exp exp .)
    -               reduce using rule 7 (exp -> - exp exp .)
    (               reduce using rule 7 (exp -> - exp exp .)
    NAME            reduce using rule 7 (exp -> - exp exp .)
    NUMBER          reduce using rule 7 (exp -> - exp exp .)
    )               reduce using rule 7 (exp -> - exp exp .)


state 24

    (8) exp -> ( exp ) .

    ;               reduce using rule 8 (exp -> ( exp ) .)
    +               reduce using rule 8 (exp -> ( exp ) .)
    -               reduce using rule 8 (exp -> ( exp ) .)
    (               reduce using rule 8 (exp -> ( exp ) .)
    NAME            reduce using rule 8 (exp -> ( exp ) .)
    NUMBER          reduce using rule 8 (exp -> ( exp ) .)
    )               reduce using rule 8 (exp -> ( exp ) .)


state 25

    (5) stmt -> STORE NAME exp ; .

    PRINT           reduce using rule 5 (stmt -> STORE NAME exp ; .)
    STORE           reduce using rule 5 (stmt -> STORE NAME exp ; .)
    $end            reduce using rule 5 (stmt -> STORE NAME exp ; .)

