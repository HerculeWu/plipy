
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftEQLEleftPLUSMINUSleftTIMESDIVIDErightUMINUSNOTPLUS MINUS TIMES DIVIDE EQ LE INTEGER ID GET PUT IF ELSE WHILE NOT DECLARE RETURN FUNCTION\n    program : stmt_list\n\n    stmt_list : stmt stmt_list\n              | empty\n\n    stmt : DECLARE ID opt_init semi\n         | ID '=' exp semi\n         | GET ID semi\n         | PUT exp semi\n         | '(' function_value ')' tuple_list semi\n         | ID tuple_list semi\n         | RETURN opt_exp semi\n         | WHILE '(' exp ')' stmt\n         | IF '(' exp ')' stmt opt_else\n         | '{' stmt_list '}'\n\n    tuple_list : '(' opt_tuple ')' tuple_list\n               | '(' opt_tuple ')'\n               \n    opt_tuple : tuple\n              | empty\n    \n    tuple : exp ',' tuple\n          | exp\n          \n    opt_formal_args : formal_args\n                    | empty\n\n    formal_args : ID ',' formal_args\n                | ID\n\n    opt_init : '=' exp\n             | empty\n             \n    opt_exp : exp\n            | empty\n\n    opt_else : ELSE stmt\n             | empty\n             \n    semi : ';'\n         | empty\n\n    exp : exp PLUS exp\n        | exp MINUS exp\n        | exp TIMES exp\n        | exp DIVIDE exp\n        | exp EQ exp\n        | exp LE exp\n        | INTEGER\n        | function_value\n        | exp tuple_list\n        | ID\n        | '(' exp ')'\n        | MINUS exp %prec UMINUS\n        | NOT exp\n        \n    function_value : FUNCTION '(' opt_formal_args ')' stmt\n    empty :"
    
_lr_action_items = {'DECLARE':([0,3,10,13,15,17,19,20,22,23,24,29,30,31,35,37,38,39,40,41,46,47,54,55,57,60,63,64,65,66,67,69,70,71,72,73,74,75,80,81,82,83,85,87,88,89,90,92,93,94,95,],[5,5,-46,5,-46,-46,-46,-46,-38,-39,-41,-46,-26,-27,-46,-25,-46,-9,-30,-31,-6,-7,-40,-43,-44,-10,-13,-4,-24,-5,-15,-32,-33,-34,-35,-36,-37,-42,-46,5,5,-14,5,-8,-11,-46,-45,-12,5,-29,-28,]),'ID':([0,3,5,7,8,10,13,15,16,17,18,19,20,21,22,23,24,25,26,29,30,31,32,33,35,36,37,38,39,40,41,46,47,48,49,50,51,52,53,54,55,57,58,60,63,64,65,66,67,68,69,70,71,72,73,74,75,80,81,82,83,85,86,87,88,89,90,92,93,94,95,],[6,6,15,19,24,24,6,-46,24,-46,24,-46,-46,24,-38,-39,-41,24,24,-46,-26,-27,24,24,-46,24,-25,-46,-9,-30,-31,-6,-7,24,24,24,24,24,24,-40,-43,-44,79,-10,-13,-4,-24,-5,-15,24,-32,-33,-34,-35,-36,-37,-42,-46,6,6,-14,6,79,-8,-11,-46,-45,-12,6,-29,-28,]),'GET':([0,3,10,13,15,17,19,20,22,23,24,29,30,31,35,37,38,39,40,41,46,47,54,55,57,60,63,64,65,66,67,69,70,71,72,73,74,75,80,81,82,83,85,87,88,89,90,92,93,94,95,],[7,7,-46,7,-46,-46,-46,-46,-38,-39,-41,-46,-26,-27,-46,-25,-46,-9,-30,-31,-6,-7,-40,-43,-44,-10,-13,-4,-24,-5,-15,-32,-33,-34,-35,-36,-37,-42,-46,7,7,-14,7,-8,-11,-46,-45,-12,7,-29,-28,]),'PUT':([0,3,10,13,15,17,19,20,22,23,24,29,30,31,35,37,38,39,40,41,46,47,54,55,57,60,63,64,65,66,67,69,70,71,72,73,74,75,80,81,82,83,85,87,88,89,90,92,93,94,95,],[8,8,-46,8,-46,-46,-46,-46,-38,-39,-41,-46,-26,-27,-46,-25,-46,-9,-30,-31,-6,-7,-40,-43,-44,-10,-13,-4,-24,-5,-15,-32,-33,-34,-35,-36,-37,-42,-46,8,8,-14,8,-8,-11,-46,-45,-12,8,-29,-28,]),'(':([0,3,6,8,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,29,30,31,32,33,35,36,37,38,39,40,41,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,80,81,82,83,85,87,88,89,90,92,93,94,95,],[9,9,18,25,25,32,33,9,-46,25,-46,25,-46,18,25,-38,-39,-41,25,25,58,-46,18,-27,25,25,-46,25,-25,18,-9,-30,-31,18,-6,-7,25,25,25,25,25,25,-40,-43,18,-44,18,-10,18,18,-13,-4,18,-5,18,25,-32,-33,-34,-35,-36,-37,-42,-46,9,9,-14,9,-8,-11,-46,-45,-12,9,-29,-28,]),'RETURN':([0,3,10,13,15,17,19,20,22,23,24,29,30,31,35,37,38,39,40,41,46,47,54,55,57,60,63,64,65,66,67,69,70,71,72,73,74,75,80,81,82,83,85,87,88,89,90,92,93,94,95,],[10,10,-46,10,-46,-46,-46,-46,-38,-39,-41,-46,-26,-27,-46,-25,-46,-9,-30,-31,-6,-7,-40,-43,-44,-10,-13,-4,-24,-5,-15,-32,-33,-34,-35,-36,-37,-42,-46,10,10,-14,10,-8,-11,-46,-45,-12,10,-29,-28,]),'WHILE':([0,3,10,13,15,17,19,20,22,23,24,29,30,31,35,37,38,39,40,41,46,47,54,55,57,60,63,64,65,66,67,69,70,71,72,73,74,75,80,81,82,83,85,87,88,89,90,92,93,94,95,],[11,11,-46,11,-46,-46,-46,-46,-38,-39,-41,-46,-26,-27,-46,-25,-46,-9,-30,-31,-6,-7,-40,-43,-44,-10,-13,-4,-24,-5,-15,-32,-33,-34,-35,-36,-37,-42,-46,11,11,-14,11,-8,-11,-46,-45,-12,11,-29,-28,]),'IF':([0,3,10,13,15,17,19,20,22,23,24,29,30,31,35,37,38,39,40,41,46,47,54,55,57,60,63,64,65,66,67,69,70,71,72,73,74,75,80,81,82,83,85,87,88,89,90,92,93,94,95,],[12,12,-46,12,-46,-46,-46,-46,-38,-39,-41,-46,-26,-27,-46,-25,-46,-9,-30,-31,-6,-7,-40,-43,-44,-10,-13,-4,-24,-5,-15,-32,-33,-34,-35,-36,-37,-42,-46,12,12,-14,12,-8,-11,-46,-45,-12,12,-29,-28,]),'{':([0,3,10,13,15,17,19,20,22,23,24,29,30,31,35,37,38,39,40,41,46,47,54,55,57,60,63,64,65,66,67,69,70,71,72,73,74,75,80,81,82,83,85,87,88,89,90,92,93,94,95,],[13,13,-46,13,-46,-46,-46,-46,-38,-39,-41,-46,-26,-27,-46,-25,-46,-9,-30,-31,-6,-7,-40,-43,-44,-10,-13,-4,-24,-5,-15,-32,-33,-34,-35,-36,-37,-42,-46,13,13,-14,13,-8,-11,-46,-45,-12,13,-29,-28,]),'$end':([0,1,2,3,4,10,14,15,17,19,20,22,23,24,29,30,31,35,37,38,39,40,41,46,47,54,55,57,60,63,64,65,66,67,69,70,71,72,73,74,75,80,83,87,88,89,90,92,94,95,],[-46,0,-1,-46,-3,-46,-2,-46,-46,-46,-46,-38,-39,-41,-46,-26,-27,-46,-25,-46,-9,-30,-31,-6,-7,-40,-43,-44,-10,-13,-4,-24,-5,-15,-32,-33,-34,-35,-36,-37,-42,-46,-14,-8,-11,-46,-45,-12,-29,-28,]),'}':([3,4,10,13,14,15,17,19,20,22,23,24,29,30,31,34,35,37,38,39,40,41,46,47,54,55,57,60,63,64,65,66,67,69,70,71,72,73,74,75,80,83,87,88,89,90,92,94,95,],[-46,-3,-46,-46,-2,-46,-46,-46,-46,-38,-39,-41,-46,-26,-27,63,-46,-25,-46,-9,-30,-31,-6,-7,-40,-43,-44,-10,-13,-4,-24,-5,-15,-32,-33,-34,-35,-36,-37,-42,-46,-14,-8,-11,-46,-45,-12,-29,-28,]),'=':([6,15,],[16,36,]),'INTEGER':([8,10,16,18,21,25,26,32,33,36,48,49,50,51,52,53,68,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'MINUS':([8,10,15,16,17,18,19,20,21,22,23,24,25,26,29,30,31,32,33,35,36,37,38,39,40,41,45,46,47,48,49,50,51,52,53,54,55,56,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,80,83,87,88,89,90,92,94,95,],[21,21,-46,21,-46,21,-46,49,21,-38,-39,-41,21,21,-46,49,-27,21,21,-46,21,-25,49,-9,-30,-31,49,-6,-7,21,21,21,21,21,21,-40,-43,49,-44,-10,49,49,-13,-4,49,-5,-15,21,-32,-33,-34,-35,49,49,-42,-46,-14,-8,-11,-46,-45,-12,-29,-28,]),'NOT':([8,10,16,18,21,25,26,32,33,36,48,49,50,51,52,53,68,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'FUNCTION':([8,9,10,16,18,21,25,26,32,33,36,48,49,50,51,52,53,68,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'ELSE':([10,15,17,19,20,22,23,24,29,30,31,35,37,38,39,40,41,46,47,54,55,57,60,63,64,65,66,67,69,70,71,72,73,74,75,80,83,87,88,89,90,92,94,95,],[-46,-46,-46,-46,-46,-38,-39,-41,-46,-26,-27,-46,-25,-46,-9,-30,-31,-6,-7,-40,-43,-44,-10,-13,-4,-24,-5,-15,-32,-33,-34,-35,-36,-37,-42,-46,-14,-8,-11,93,-45,-12,-29,-28,]),'PLUS':([10,15,17,19,20,22,23,24,29,30,31,35,37,38,39,40,41,45,46,47,54,55,56,57,60,61,62,63,64,65,66,67,69,70,71,72,73,74,75,80,83,87,88,89,90,92,94,95,],[-46,-46,-46,-46,48,-38,-39,-41,-46,48,-27,-46,-25,48,-9,-30,-31,48,-6,-7,-40,-43,48,-44,-10,48,48,-13,-4,48,-5,-15,-32,-33,-34,-35,48,48,-42,-46,-14,-8,-11,-46,-45,-12,-29,-28,]),'TIMES':([10,15,17,19,20,22,23,24,29,30,31,35,37,38,39,40,41,45,46,47,54,55,56,57,60,61,62,63,64,65,66,67,69,70,71,72,73,74,75,80,83,87,88,89,90,92,94,95,],[-46,-46,-46,-46,50,-38,-39,-41,-46,50,-27,-46,-25,50,-9,-30,-31,50,-6,-7,-40,-43,50,-44,-10,50,50,-13,-4,50,-5,-15,50,50,-34,-35,50,50,-42,-46,-14,-8,-11,-46,-45,-12,-29,-28,]),'DIVIDE':([10,15,17,19,20,22,23,24,29,30,31,35,37,38,39,40,41,45,46,47,54,55,56,57,60,61,62,63,64,65,66,67,69,70,71,72,73,74,75,80,83,87,88,89,90,92,94,95,],[-46,-46,-46,-46,51,-38,-39,-41,-46,51,-27,-46,-25,51,-9,-30,-31,51,-6,-7,-40,-43,51,-44,-10,51,51,-13,-4,51,-5,-15,51,51,-34,-35,51,51,-42,-46,-14,-8,-11,-46,-45,-12,-29,-28,]),'EQ':([10,15,17,19,20,22,23,24,29,30,31,35,37,38,39,40,41,45,46,47,54,55,56,57,60,61,62,63,64,65,66,67,69,70,71,72,73,74,75,80,83,87,88,89,90,92,94,95,],[-46,-46,-46,-46,52,-38,-39,-41,-46,52,-27,-46,-25,52,-9,-30,-31,52,-6,-7,-40,-43,52,-44,-10,52,52,-13,-4,52,-5,-15,-32,-33,-34,-35,-36,-37,-42,-46,-14,-8,-11,-46,-45,-12,-29,-28,]),'LE':([10,15,17,19,20,22,23,24,29,30,31,35,37,38,39,40,41,45,46,47,54,55,56,57,60,61,62,63,64,65,66,67,69,70,71,72,73,74,75,80,83,87,88,89,90,92,94,95,],[-46,-46,-46,-46,53,-38,-39,-41,-46,53,-27,-46,-25,53,-9,-30,-31,53,-6,-7,-40,-43,53,-44,-10,53,53,-13,-4,53,-5,-15,-32,-33,-34,-35,-36,-37,-42,-46,-14,-8,-11,-46,-45,-12,-29,-28,]),';':([10,15,17,19,20,22,23,24,29,30,31,35,37,38,39,40,41,46,47,54,55,57,60,63,64,65,66,67,69,70,71,72,73,74,75,80,83,87,88,89,90,92,94,95,],[-46,-46,40,40,40,-38,-39,-41,40,-26,-27,40,-25,40,-9,-30,-31,-6,-7,-40,-43,-44,-10,-13,-4,-24,-5,-15,-32,-33,-34,-35,-36,-37,-42,40,-14,-8,-11,-46,-45,-12,-29,-28,]),')':([10,15,17,18,19,20,22,23,24,28,29,30,31,35,37,38,39,40,41,42,43,44,45,46,47,54,55,56,57,58,60,61,62,63,64,65,66,67,69,70,71,72,73,74,75,76,77,78,79,80,83,84,87,88,89,90,91,92,94,95,],[-46,-46,-46,-46,-46,-46,-38,-39,-41,59,-46,-26,-27,-46,-25,-46,-9,-30,-31,67,-16,-17,-19,-6,-7,-40,-43,75,-44,-46,-10,81,82,-13,-4,-24,-5,-15,-32,-33,-34,-35,-36,-37,-42,85,-20,-21,-23,-46,-14,-18,-8,-11,-46,-45,-22,-12,-29,-28,]),',':([10,15,17,19,20,22,23,24,29,30,31,35,37,38,39,40,41,45,46,47,54,55,57,60,63,64,65,66,67,69,70,71,72,73,74,75,79,80,83,87,88,89,90,92,94,95,],[-46,-46,-46,-46,-46,-38,-39,-41,-46,-26,-27,-46,-25,-46,-9,-30,-31,68,-6,-7,-40,-43,-44,-10,-13,-4,-24,-5,-15,-32,-33,-34,-35,-36,-37,-42,86,-46,-14,-8,-11,-46,-45,-12,-29,-28,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmt_list':([0,3,13,],[2,14,34,]),'stmt':([0,3,13,81,82,85,93,],[3,3,3,88,89,90,95,]),'empty':([0,3,10,13,15,17,18,19,20,29,35,38,58,80,89,],[4,4,31,4,37,41,44,41,41,41,41,41,78,41,94,]),'tuple_list':([6,20,30,38,45,55,56,57,59,61,62,65,67,69,70,71,72,73,74,],[17,54,54,54,54,54,54,54,80,54,54,54,83,54,54,54,54,54,54,]),'exp':([8,10,16,18,21,25,26,32,33,36,48,49,50,51,52,53,68,],[20,30,38,45,55,56,57,61,62,65,69,70,71,72,73,74,45,]),'function_value':([8,9,10,16,18,21,25,26,32,33,36,48,49,50,51,52,53,68,],[23,28,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'opt_exp':([10,],[29,]),'opt_init':([15,],[35,]),'semi':([17,19,20,29,35,38,80,],[39,46,47,60,64,66,87,]),'opt_tuple':([18,],[42,]),'tuple':([18,68,],[43,84,]),'opt_formal_args':([58,],[76,]),'formal_args':([58,86,],[77,91,]),'opt_else':([89,],[92,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt_list','program',1,'p_grammar','cuppa3h_gram.py',18),
  ('stmt_list -> stmt stmt_list','stmt_list',2,'p_grammar','cuppa3h_gram.py',20),
  ('stmt_list -> empty','stmt_list',1,'p_grammar','cuppa3h_gram.py',21),
  ('stmt -> DECLARE ID opt_init semi','stmt',4,'p_grammar','cuppa3h_gram.py',23),
  ('stmt -> ID = exp semi','stmt',4,'p_grammar','cuppa3h_gram.py',24),
  ('stmt -> GET ID semi','stmt',3,'p_grammar','cuppa3h_gram.py',25),
  ('stmt -> PUT exp semi','stmt',3,'p_grammar','cuppa3h_gram.py',26),
  ('stmt -> ( function_value ) tuple_list semi','stmt',5,'p_grammar','cuppa3h_gram.py',27),
  ('stmt -> ID tuple_list semi','stmt',3,'p_grammar','cuppa3h_gram.py',28),
  ('stmt -> RETURN opt_exp semi','stmt',3,'p_grammar','cuppa3h_gram.py',29),
  ('stmt -> WHILE ( exp ) stmt','stmt',5,'p_grammar','cuppa3h_gram.py',30),
  ('stmt -> IF ( exp ) stmt opt_else','stmt',6,'p_grammar','cuppa3h_gram.py',31),
  ('stmt -> { stmt_list }','stmt',3,'p_grammar','cuppa3h_gram.py',32),
  ('tuple_list -> ( opt_tuple ) tuple_list','tuple_list',4,'p_grammar','cuppa3h_gram.py',34),
  ('tuple_list -> ( opt_tuple )','tuple_list',3,'p_grammar','cuppa3h_gram.py',35),
  ('opt_tuple -> tuple','opt_tuple',1,'p_grammar','cuppa3h_gram.py',37),
  ('opt_tuple -> empty','opt_tuple',1,'p_grammar','cuppa3h_gram.py',38),
  ('tuple -> exp , tuple','tuple',3,'p_grammar','cuppa3h_gram.py',40),
  ('tuple -> exp','tuple',1,'p_grammar','cuppa3h_gram.py',41),
  ('opt_formal_args -> formal_args','opt_formal_args',1,'p_grammar','cuppa3h_gram.py',43),
  ('opt_formal_args -> empty','opt_formal_args',1,'p_grammar','cuppa3h_gram.py',44),
  ('formal_args -> ID , formal_args','formal_args',3,'p_grammar','cuppa3h_gram.py',46),
  ('formal_args -> ID','formal_args',1,'p_grammar','cuppa3h_gram.py',47),
  ('opt_init -> = exp','opt_init',2,'p_grammar','cuppa3h_gram.py',49),
  ('opt_init -> empty','opt_init',1,'p_grammar','cuppa3h_gram.py',50),
  ('opt_exp -> exp','opt_exp',1,'p_grammar','cuppa3h_gram.py',52),
  ('opt_exp -> empty','opt_exp',1,'p_grammar','cuppa3h_gram.py',53),
  ('opt_else -> ELSE stmt','opt_else',2,'p_grammar','cuppa3h_gram.py',55),
  ('opt_else -> empty','opt_else',1,'p_grammar','cuppa3h_gram.py',56),
  ('semi -> ;','semi',1,'p_grammar','cuppa3h_gram.py',58),
  ('semi -> empty','semi',1,'p_grammar','cuppa3h_gram.py',59),
  ('exp -> exp PLUS exp','exp',3,'p_grammar','cuppa3h_gram.py',61),
  ('exp -> exp MINUS exp','exp',3,'p_grammar','cuppa3h_gram.py',62),
  ('exp -> exp TIMES exp','exp',3,'p_grammar','cuppa3h_gram.py',63),
  ('exp -> exp DIVIDE exp','exp',3,'p_grammar','cuppa3h_gram.py',64),
  ('exp -> exp EQ exp','exp',3,'p_grammar','cuppa3h_gram.py',65),
  ('exp -> exp LE exp','exp',3,'p_grammar','cuppa3h_gram.py',66),
  ('exp -> INTEGER','exp',1,'p_grammar','cuppa3h_gram.py',67),
  ('exp -> function_value','exp',1,'p_grammar','cuppa3h_gram.py',68),
  ('exp -> exp tuple_list','exp',2,'p_grammar','cuppa3h_gram.py',69),
  ('exp -> ID','exp',1,'p_grammar','cuppa3h_gram.py',70),
  ('exp -> ( exp )','exp',3,'p_grammar','cuppa3h_gram.py',71),
  ('exp -> MINUS exp','exp',2,'p_grammar','cuppa3h_gram.py',72),
  ('exp -> NOT exp','exp',2,'p_grammar','cuppa3h_gram.py',73),
  ('function_value -> FUNCTION ( opt_formal_args ) stmt','function_value',5,'p_grammar','cuppa3h_gram.py',75),
  ('empty -> <empty>','empty',0,'p_empty','cuppa3h_gram.py',80),
]
